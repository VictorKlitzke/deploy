
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>
/**
 * Model categorias
 * 
 */
export type categorias = $Result.DefaultSelection<Prisma.$categoriasPayload>
/**
 * Model contas
 * 
 */
export type contas = $Result.DefaultSelection<Prisma.$contasPayload>
/**
 * Model transacoes
 * 
 */
export type transacoes = $Result.DefaultSelection<Prisma.$transacoesPayload>
/**
 * Model parcelas
 * 
 */
export type parcelas = $Result.DefaultSelection<Prisma.$parcelasPayload>
/**
 * Model orcamentos
 * 
 */
export type orcamentos = $Result.DefaultSelection<Prisma.$orcamentosPayload>
/**
 * Model metas
 * 
 */
export type metas = $Result.DefaultSelection<Prisma.$metasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuarios.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuarios.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs>;

  /**
   * `prisma.categorias`: Exposes CRUD operations for the **categorias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categorias.findMany()
    * ```
    */
  get categorias(): Prisma.categoriasDelegate<ExtArgs>;

  /**
   * `prisma.contas`: Exposes CRUD operations for the **contas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contas
    * const contas = await prisma.contas.findMany()
    * ```
    */
  get contas(): Prisma.contasDelegate<ExtArgs>;

  /**
   * `prisma.transacoes`: Exposes CRUD operations for the **transacoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transacoes
    * const transacoes = await prisma.transacoes.findMany()
    * ```
    */
  get transacoes(): Prisma.transacoesDelegate<ExtArgs>;

  /**
   * `prisma.parcelas`: Exposes CRUD operations for the **parcelas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parcelas
    * const parcelas = await prisma.parcelas.findMany()
    * ```
    */
  get parcelas(): Prisma.parcelasDelegate<ExtArgs>;

  /**
   * `prisma.orcamentos`: Exposes CRUD operations for the **orcamentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orcamentos
    * const orcamentos = await prisma.orcamentos.findMany()
    * ```
    */
  get orcamentos(): Prisma.orcamentosDelegate<ExtArgs>;

  /**
   * `prisma.metas`: Exposes CRUD operations for the **metas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Metas
    * const metas = await prisma.metas.findMany()
    * ```
    */
  get metas(): Prisma.metasDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usuarios: 'usuarios',
    categorias: 'categorias',
    contas: 'contas',
    transacoes: 'transacoes',
    parcelas: 'parcelas',
    orcamentos: 'orcamentos',
    metas: 'metas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuarios" | "categorias" | "contas" | "transacoes" | "parcelas" | "orcamentos" | "metas"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
      categorias: {
        payload: Prisma.$categoriasPayload<ExtArgs>
        fields: Prisma.categoriasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          findFirst: {
            args: Prisma.categoriasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          findMany: {
            args: Prisma.categoriasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>[]
          }
          create: {
            args: Prisma.categoriasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          createMany: {
            args: Prisma.categoriasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.categoriasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>[]
          }
          delete: {
            args: Prisma.categoriasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          update: {
            args: Prisma.categoriasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          deleteMany: {
            args: Prisma.categoriasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoriasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoriasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          aggregate: {
            args: Prisma.CategoriasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorias>
          }
          groupBy: {
            args: Prisma.categoriasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriasGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriasCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriasCountAggregateOutputType> | number
          }
        }
      }
      contas: {
        payload: Prisma.$contasPayload<ExtArgs>
        fields: Prisma.contasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>
          }
          findFirst: {
            args: Prisma.contasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>
          }
          findMany: {
            args: Prisma.contasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>[]
          }
          create: {
            args: Prisma.contasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>
          }
          createMany: {
            args: Prisma.contasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.contasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>[]
          }
          delete: {
            args: Prisma.contasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>
          }
          update: {
            args: Prisma.contasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>
          }
          deleteMany: {
            args: Prisma.contasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contasPayload>
          }
          aggregate: {
            args: Prisma.ContasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContas>
          }
          groupBy: {
            args: Prisma.contasGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContasGroupByOutputType>[]
          }
          count: {
            args: Prisma.contasCountArgs<ExtArgs>
            result: $Utils.Optional<ContasCountAggregateOutputType> | number
          }
        }
      }
      transacoes: {
        payload: Prisma.$transacoesPayload<ExtArgs>
        fields: Prisma.transacoesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transacoesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transacoesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>
          }
          findFirst: {
            args: Prisma.transacoesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transacoesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>
          }
          findMany: {
            args: Prisma.transacoesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>[]
          }
          create: {
            args: Prisma.transacoesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>
          }
          createMany: {
            args: Prisma.transacoesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transacoesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>[]
          }
          delete: {
            args: Prisma.transacoesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>
          }
          update: {
            args: Prisma.transacoesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>
          }
          deleteMany: {
            args: Prisma.transacoesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transacoesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.transacoesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transacoesPayload>
          }
          aggregate: {
            args: Prisma.TransacoesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransacoes>
          }
          groupBy: {
            args: Prisma.transacoesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransacoesGroupByOutputType>[]
          }
          count: {
            args: Prisma.transacoesCountArgs<ExtArgs>
            result: $Utils.Optional<TransacoesCountAggregateOutputType> | number
          }
        }
      }
      parcelas: {
        payload: Prisma.$parcelasPayload<ExtArgs>
        fields: Prisma.parcelasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.parcelasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.parcelasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>
          }
          findFirst: {
            args: Prisma.parcelasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.parcelasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>
          }
          findMany: {
            args: Prisma.parcelasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>[]
          }
          create: {
            args: Prisma.parcelasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>
          }
          createMany: {
            args: Prisma.parcelasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.parcelasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>[]
          }
          delete: {
            args: Prisma.parcelasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>
          }
          update: {
            args: Prisma.parcelasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>
          }
          deleteMany: {
            args: Prisma.parcelasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.parcelasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.parcelasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$parcelasPayload>
          }
          aggregate: {
            args: Prisma.ParcelasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParcelas>
          }
          groupBy: {
            args: Prisma.parcelasGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParcelasGroupByOutputType>[]
          }
          count: {
            args: Prisma.parcelasCountArgs<ExtArgs>
            result: $Utils.Optional<ParcelasCountAggregateOutputType> | number
          }
        }
      }
      orcamentos: {
        payload: Prisma.$orcamentosPayload<ExtArgs>
        fields: Prisma.orcamentosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orcamentosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orcamentosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>
          }
          findFirst: {
            args: Prisma.orcamentosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orcamentosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>
          }
          findMany: {
            args: Prisma.orcamentosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>[]
          }
          create: {
            args: Prisma.orcamentosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>
          }
          createMany: {
            args: Prisma.orcamentosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.orcamentosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>[]
          }
          delete: {
            args: Prisma.orcamentosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>
          }
          update: {
            args: Prisma.orcamentosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>
          }
          deleteMany: {
            args: Prisma.orcamentosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orcamentosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.orcamentosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orcamentosPayload>
          }
          aggregate: {
            args: Prisma.OrcamentosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrcamentos>
          }
          groupBy: {
            args: Prisma.orcamentosGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrcamentosGroupByOutputType>[]
          }
          count: {
            args: Prisma.orcamentosCountArgs<ExtArgs>
            result: $Utils.Optional<OrcamentosCountAggregateOutputType> | number
          }
        }
      }
      metas: {
        payload: Prisma.$metasPayload<ExtArgs>
        fields: Prisma.metasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.metasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.metasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>
          }
          findFirst: {
            args: Prisma.metasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.metasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>
          }
          findMany: {
            args: Prisma.metasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>[]
          }
          create: {
            args: Prisma.metasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>
          }
          createMany: {
            args: Prisma.metasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.metasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>[]
          }
          delete: {
            args: Prisma.metasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>
          }
          update: {
            args: Prisma.metasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>
          }
          deleteMany: {
            args: Prisma.metasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.metasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.metasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$metasPayload>
          }
          aggregate: {
            args: Prisma.MetasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetas>
          }
          groupBy: {
            args: Prisma.metasGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetasGroupByOutputType>[]
          }
          count: {
            args: Prisma.metasCountArgs<ExtArgs>
            result: $Utils.Optional<MetasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuariosCountOutputType
   */

  export type UsuariosCountOutputType = {
    categorias: number
    contas: number
    transacoes: number
    orcamentos: number
    metas: number
  }

  export type UsuariosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorias?: boolean | UsuariosCountOutputTypeCountCategoriasArgs
    contas?: boolean | UsuariosCountOutputTypeCountContasArgs
    transacoes?: boolean | UsuariosCountOutputTypeCountTransacoesArgs
    orcamentos?: boolean | UsuariosCountOutputTypeCountOrcamentosArgs
    metas?: boolean | UsuariosCountOutputTypeCountMetasArgs
  }

  // Custom InputTypes
  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountContasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contasWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountTransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transacoesWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountOrcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orcamentosWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountMetasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: metasWhereInput
  }


  /**
   * Count Type CategoriasCountOutputType
   */

  export type CategoriasCountOutputType = {
    transacoes: number
    orcamentos: number
  }

  export type CategoriasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transacoes?: boolean | CategoriasCountOutputTypeCountTransacoesArgs
    orcamentos?: boolean | CategoriasCountOutputTypeCountOrcamentosArgs
  }

  // Custom InputTypes
  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriasCountOutputType
     */
    select?: CategoriasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountTransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transacoesWhereInput
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountOrcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orcamentosWhereInput
  }


  /**
   * Count Type ContasCountOutputType
   */

  export type ContasCountOutputType = {
    transacoes: number
  }

  export type ContasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transacoes?: boolean | ContasCountOutputTypeCountTransacoesArgs
  }

  // Custom InputTypes
  /**
   * ContasCountOutputType without action
   */
  export type ContasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContasCountOutputType
     */
    select?: ContasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContasCountOutputType without action
   */
  export type ContasCountOutputTypeCountTransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transacoesWhereInput
  }


  /**
   * Count Type TransacoesCountOutputType
   */

  export type TransacoesCountOutputType = {
    parcelas: number
  }

  export type TransacoesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parcelas?: boolean | TransacoesCountOutputTypeCountParcelasArgs
  }

  // Custom InputTypes
  /**
   * TransacoesCountOutputType without action
   */
  export type TransacoesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransacoesCountOutputType
     */
    select?: TransacoesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransacoesCountOutputType without action
   */
  export type TransacoesCountOutputTypeCountParcelasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: parcelasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    criado_em: Date | null
    ativo: boolean | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    criado_em: Date | null
    ativo: boolean | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    criado_em: number
    ativo: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criado_em?: true
    ativo?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criado_em?: true
    ativo?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criado_em?: true
    ativo?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    criado_em: Date
    ativo: boolean
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criado_em?: boolean
    ativo?: boolean
    categorias?: boolean | usuarios$categoriasArgs<ExtArgs>
    contas?: boolean | usuarios$contasArgs<ExtArgs>
    transacoes?: boolean | usuarios$transacoesArgs<ExtArgs>
    orcamentos?: boolean | usuarios$orcamentosArgs<ExtArgs>
    metas?: boolean | usuarios$metasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criado_em?: boolean
    ativo?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criado_em?: boolean
    ativo?: boolean
  }

  export type usuariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorias?: boolean | usuarios$categoriasArgs<ExtArgs>
    contas?: boolean | usuarios$contasArgs<ExtArgs>
    transacoes?: boolean | usuarios$transacoesArgs<ExtArgs>
    orcamentos?: boolean | usuarios$orcamentosArgs<ExtArgs>
    metas?: boolean | usuarios$metasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usuariosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {
      categorias: Prisma.$categoriasPayload<ExtArgs>[]
      contas: Prisma.$contasPayload<ExtArgs>[]
      transacoes: Prisma.$transacoesPayload<ExtArgs>[]
      orcamentos: Prisma.$orcamentosPayload<ExtArgs>[]
      metas: Prisma.$metasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      criado_em: Date
      ativo: boolean
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuariosFindUniqueArgs>(args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuariosFindFirstArgs>(args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuariosFindManyArgs>(args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends usuariosCreateArgs>(args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuariosCreateManyArgs>(args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuariosCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usuariosCreateManyAndReturnArgs>(args?: SelectSubset<T, usuariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends usuariosDeleteArgs>(args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuariosUpdateArgs>(args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuariosDeleteManyArgs>(args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuariosUpdateManyArgs>(args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends usuariosUpsertArgs>(args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categorias<T extends usuarios$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findMany"> | Null>
    contas<T extends usuarios$contasArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$contasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findMany"> | Null>
    transacoes<T extends usuarios$transacoesArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$transacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findMany"> | Null>
    orcamentos<T extends usuarios$orcamentosArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$orcamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findMany"> | Null>
    metas<T extends usuarios$metasArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$metasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuarios model
   */ 
  interface usuariosFieldRefs {
    readonly id: FieldRef<"usuarios", 'Int'>
    readonly nome: FieldRef<"usuarios", 'String'>
    readonly email: FieldRef<"usuarios", 'String'>
    readonly senha: FieldRef<"usuarios", 'String'>
    readonly criado_em: FieldRef<"usuarios", 'DateTime'>
    readonly ativo: FieldRef<"usuarios", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }

  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
  }

  /**
   * usuarios createManyAndReturn
   */
  export type usuariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
  }

  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
  }

  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }

  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
  }

  /**
   * usuarios.categorias
   */
  export type usuarios$categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    cursor?: categoriasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * usuarios.contas
   */
  export type usuarios$contasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    where?: contasWhereInput
    orderBy?: contasOrderByWithRelationInput | contasOrderByWithRelationInput[]
    cursor?: contasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContasScalarFieldEnum | ContasScalarFieldEnum[]
  }

  /**
   * usuarios.transacoes
   */
  export type usuarios$transacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    where?: transacoesWhereInput
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    cursor?: transacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransacoesScalarFieldEnum | TransacoesScalarFieldEnum[]
  }

  /**
   * usuarios.orcamentos
   */
  export type usuarios$orcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    where?: orcamentosWhereInput
    orderBy?: orcamentosOrderByWithRelationInput | orcamentosOrderByWithRelationInput[]
    cursor?: orcamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrcamentosScalarFieldEnum | OrcamentosScalarFieldEnum[]
  }

  /**
   * usuarios.metas
   */
  export type usuarios$metasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    where?: metasWhereInput
    orderBy?: metasOrderByWithRelationInput | metasOrderByWithRelationInput[]
    cursor?: metasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetasScalarFieldEnum | MetasScalarFieldEnum[]
  }

  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
  }


  /**
   * Model categorias
   */

  export type AggregateCategorias = {
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  export type CategoriasAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type CategoriasSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type CategoriasMinAggregateOutputType = {
    id: number | null
    nome: string | null
    tipo: string | null
    criado_em: Date | null
    usuario_id: number | null
  }

  export type CategoriasMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    tipo: string | null
    criado_em: Date | null
    usuario_id: number | null
  }

  export type CategoriasCountAggregateOutputType = {
    id: number
    nome: number
    tipo: number
    criado_em: number
    usuario_id: number
    _all: number
  }


  export type CategoriasAvgAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type CategoriasSumAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type CategoriasMinAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    criado_em?: true
    usuario_id?: true
  }

  export type CategoriasMaxAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    criado_em?: true
    usuario_id?: true
  }

  export type CategoriasCountAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    criado_em?: true
    usuario_id?: true
    _all?: true
  }

  export type CategoriasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to aggregate.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriasMaxAggregateInputType
  }

  export type GetCategoriasAggregateType<T extends CategoriasAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorias[P]>
      : GetScalarType<T[P], AggregateCategorias[P]>
  }




  export type categoriasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithAggregationInput | categoriasOrderByWithAggregationInput[]
    by: CategoriasScalarFieldEnum[] | CategoriasScalarFieldEnum
    having?: categoriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriasCountAggregateInputType | true
    _avg?: CategoriasAvgAggregateInputType
    _sum?: CategoriasSumAggregateInputType
    _min?: CategoriasMinAggregateInputType
    _max?: CategoriasMaxAggregateInputType
  }

  export type CategoriasGroupByOutputType = {
    id: number
    nome: string
    tipo: string
    criado_em: Date
    usuario_id: number
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  type GetCategoriasGroupByPayload<T extends categoriasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
        }
      >
    >


  export type categoriasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tipo?: boolean
    criado_em?: boolean
    usuario_id?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    transacoes?: boolean | categorias$transacoesArgs<ExtArgs>
    orcamentos?: boolean | categorias$orcamentosArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type categoriasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tipo?: boolean
    criado_em?: boolean
    usuario_id?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type categoriasSelectScalar = {
    id?: boolean
    nome?: boolean
    tipo?: boolean
    criado_em?: boolean
    usuario_id?: boolean
  }

  export type categoriasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    transacoes?: boolean | categorias$transacoesArgs<ExtArgs>
    orcamentos?: boolean | categorias$orcamentosArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type categoriasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $categoriasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categorias"
    objects: {
      usuario: Prisma.$usuariosPayload<ExtArgs>
      transacoes: Prisma.$transacoesPayload<ExtArgs>[]
      orcamentos: Prisma.$orcamentosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      tipo: string
      criado_em: Date
      usuario_id: number
    }, ExtArgs["result"]["categorias"]>
    composites: {}
  }

  type categoriasGetPayload<S extends boolean | null | undefined | categoriasDefaultArgs> = $Result.GetResult<Prisma.$categoriasPayload, S>

  type categoriasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriasCountAggregateInputType | true
    }

  export interface categoriasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categorias'], meta: { name: 'categorias' } }
    /**
     * Find zero or one Categorias that matches the filter.
     * @param {categoriasFindUniqueArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoriasFindUniqueArgs>(args: SelectSubset<T, categoriasFindUniqueArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categorias that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoriasFindUniqueOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoriasFindUniqueOrThrowArgs>(args: SelectSubset<T, categoriasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoriasFindFirstArgs>(args?: SelectSubset<T, categoriasFindFirstArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categorias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoriasFindFirstOrThrowArgs>(args?: SelectSubset<T, categoriasFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categorias.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categorias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriasWithIdOnly = await prisma.categorias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoriasFindManyArgs>(args?: SelectSubset<T, categoriasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categorias.
     * @param {categoriasCreateArgs} args - Arguments to create a Categorias.
     * @example
     * // Create one Categorias
     * const Categorias = await prisma.categorias.create({
     *   data: {
     *     // ... data to create a Categorias
     *   }
     * })
     * 
     */
    create<T extends categoriasCreateArgs>(args: SelectSubset<T, categoriasCreateArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {categoriasCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categorias = await prisma.categorias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoriasCreateManyArgs>(args?: SelectSubset<T, categoriasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categorias and returns the data saved in the database.
     * @param {categoriasCreateManyAndReturnArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categorias = await prisma.categorias.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categorias and only return the `id`
     * const categoriasWithIdOnly = await prisma.categorias.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends categoriasCreateManyAndReturnArgs>(args?: SelectSubset<T, categoriasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Categorias.
     * @param {categoriasDeleteArgs} args - Arguments to delete one Categorias.
     * @example
     * // Delete one Categorias
     * const Categorias = await prisma.categorias.delete({
     *   where: {
     *     // ... filter to delete one Categorias
     *   }
     * })
     * 
     */
    delete<T extends categoriasDeleteArgs>(args: SelectSubset<T, categoriasDeleteArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categorias.
     * @param {categoriasUpdateArgs} args - Arguments to update one Categorias.
     * @example
     * // Update one Categorias
     * const categorias = await prisma.categorias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoriasUpdateArgs>(args: SelectSubset<T, categoriasUpdateArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriasDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categorias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoriasDeleteManyArgs>(args?: SelectSubset<T, categoriasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoriasUpdateManyArgs>(args: SelectSubset<T, categoriasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorias.
     * @param {categoriasUpsertArgs} args - Arguments to update or create a Categorias.
     * @example
     * // Update or create a Categorias
     * const categorias = await prisma.categorias.upsert({
     *   create: {
     *     // ... data to create a Categorias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorias we want to update
     *   }
     * })
     */
    upsert<T extends categoriasUpsertArgs>(args: SelectSubset<T, categoriasUpsertArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categorias.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriasCountArgs>(
      args?: Subset<T, categoriasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriasAggregateArgs>(args: Subset<T, CategoriasAggregateArgs>): Prisma.PrismaPromise<GetCategoriasAggregateType<T>>

    /**
     * Group by Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriasGroupByArgs['orderBy'] }
        : { orderBy?: categoriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categorias model
   */
  readonly fields: categoriasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categorias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transacoes<T extends categorias$transacoesArgs<ExtArgs> = {}>(args?: Subset<T, categorias$transacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findMany"> | Null>
    orcamentos<T extends categorias$orcamentosArgs<ExtArgs> = {}>(args?: Subset<T, categorias$orcamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the categorias model
   */ 
  interface categoriasFieldRefs {
    readonly id: FieldRef<"categorias", 'Int'>
    readonly nome: FieldRef<"categorias", 'String'>
    readonly tipo: FieldRef<"categorias", 'String'>
    readonly criado_em: FieldRef<"categorias", 'DateTime'>
    readonly usuario_id: FieldRef<"categorias", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * categorias findUnique
   */
  export type categoriasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias findUniqueOrThrow
   */
  export type categoriasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias findFirst
   */
  export type categoriasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias findFirstOrThrow
   */
  export type categoriasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias findMany
   */
  export type categoriasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias create
   */
  export type categoriasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The data needed to create a categorias.
     */
    data: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
  }

  /**
   * categorias createMany
   */
  export type categoriasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriasCreateManyInput | categoriasCreateManyInput[]
  }

  /**
   * categorias createManyAndReturn
   */
  export type categoriasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many categorias.
     */
    data: categoriasCreateManyInput | categoriasCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * categorias update
   */
  export type categoriasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The data needed to update a categorias.
     */
    data: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
    /**
     * Choose, which categorias to update.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias updateMany
   */
  export type categoriasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriasWhereInput
  }

  /**
   * categorias upsert
   */
  export type categoriasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The filter to search for the categorias to update in case it exists.
     */
    where: categoriasWhereUniqueInput
    /**
     * In case the categorias found by the `where` argument doesn't exist, create a new categorias with this data.
     */
    create: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
    /**
     * In case the categorias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
  }

  /**
   * categorias delete
   */
  export type categoriasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter which categorias to delete.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias deleteMany
   */
  export type categoriasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriasWhereInput
  }

  /**
   * categorias.transacoes
   */
  export type categorias$transacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    where?: transacoesWhereInput
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    cursor?: transacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransacoesScalarFieldEnum | TransacoesScalarFieldEnum[]
  }

  /**
   * categorias.orcamentos
   */
  export type categorias$orcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    where?: orcamentosWhereInput
    orderBy?: orcamentosOrderByWithRelationInput | orcamentosOrderByWithRelationInput[]
    cursor?: orcamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrcamentosScalarFieldEnum | OrcamentosScalarFieldEnum[]
  }

  /**
   * categorias without action
   */
  export type categoriasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
  }


  /**
   * Model contas
   */

  export type AggregateContas = {
    _count: ContasCountAggregateOutputType | null
    _avg: ContasAvgAggregateOutputType | null
    _sum: ContasSumAggregateOutputType | null
    _min: ContasMinAggregateOutputType | null
    _max: ContasMaxAggregateOutputType | null
  }

  export type ContasAvgAggregateOutputType = {
    id: number | null
    saldo_inicial: number | null
    usuario_id: number | null
  }

  export type ContasSumAggregateOutputType = {
    id: number | null
    saldo_inicial: number | null
    usuario_id: number | null
  }

  export type ContasMinAggregateOutputType = {
    id: number | null
    nome: string | null
    saldo_inicial: number | null
    criado_em: Date | null
    usuario_id: number | null
  }

  export type ContasMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    saldo_inicial: number | null
    criado_em: Date | null
    usuario_id: number | null
  }

  export type ContasCountAggregateOutputType = {
    id: number
    nome: number
    saldo_inicial: number
    criado_em: number
    usuario_id: number
    _all: number
  }


  export type ContasAvgAggregateInputType = {
    id?: true
    saldo_inicial?: true
    usuario_id?: true
  }

  export type ContasSumAggregateInputType = {
    id?: true
    saldo_inicial?: true
    usuario_id?: true
  }

  export type ContasMinAggregateInputType = {
    id?: true
    nome?: true
    saldo_inicial?: true
    criado_em?: true
    usuario_id?: true
  }

  export type ContasMaxAggregateInputType = {
    id?: true
    nome?: true
    saldo_inicial?: true
    criado_em?: true
    usuario_id?: true
  }

  export type ContasCountAggregateInputType = {
    id?: true
    nome?: true
    saldo_inicial?: true
    criado_em?: true
    usuario_id?: true
    _all?: true
  }

  export type ContasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contas to aggregate.
     */
    where?: contasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contas to fetch.
     */
    orderBy?: contasOrderByWithRelationInput | contasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contas
    **/
    _count?: true | ContasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContasMaxAggregateInputType
  }

  export type GetContasAggregateType<T extends ContasAggregateArgs> = {
        [P in keyof T & keyof AggregateContas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContas[P]>
      : GetScalarType<T[P], AggregateContas[P]>
  }




  export type contasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contasWhereInput
    orderBy?: contasOrderByWithAggregationInput | contasOrderByWithAggregationInput[]
    by: ContasScalarFieldEnum[] | ContasScalarFieldEnum
    having?: contasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContasCountAggregateInputType | true
    _avg?: ContasAvgAggregateInputType
    _sum?: ContasSumAggregateInputType
    _min?: ContasMinAggregateInputType
    _max?: ContasMaxAggregateInputType
  }

  export type ContasGroupByOutputType = {
    id: number
    nome: string
    saldo_inicial: number
    criado_em: Date
    usuario_id: number
    _count: ContasCountAggregateOutputType | null
    _avg: ContasAvgAggregateOutputType | null
    _sum: ContasSumAggregateOutputType | null
    _min: ContasMinAggregateOutputType | null
    _max: ContasMaxAggregateOutputType | null
  }

  type GetContasGroupByPayload<T extends contasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContasGroupByOutputType[P]>
            : GetScalarType<T[P], ContasGroupByOutputType[P]>
        }
      >
    >


  export type contasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    saldo_inicial?: boolean
    criado_em?: boolean
    usuario_id?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    transacoes?: boolean | contas$transacoesArgs<ExtArgs>
    _count?: boolean | ContasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contas"]>

  export type contasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    saldo_inicial?: boolean
    criado_em?: boolean
    usuario_id?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contas"]>

  export type contasSelectScalar = {
    id?: boolean
    nome?: boolean
    saldo_inicial?: boolean
    criado_em?: boolean
    usuario_id?: boolean
  }

  export type contasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    transacoes?: boolean | contas$transacoesArgs<ExtArgs>
    _count?: boolean | ContasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type contasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $contasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contas"
    objects: {
      usuario: Prisma.$usuariosPayload<ExtArgs>
      transacoes: Prisma.$transacoesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      saldo_inicial: number
      criado_em: Date
      usuario_id: number
    }, ExtArgs["result"]["contas"]>
    composites: {}
  }

  type contasGetPayload<S extends boolean | null | undefined | contasDefaultArgs> = $Result.GetResult<Prisma.$contasPayload, S>

  type contasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<contasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContasCountAggregateInputType | true
    }

  export interface contasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contas'], meta: { name: 'contas' } }
    /**
     * Find zero or one Contas that matches the filter.
     * @param {contasFindUniqueArgs} args - Arguments to find a Contas
     * @example
     * // Get one Contas
     * const contas = await prisma.contas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contasFindUniqueArgs>(args: SelectSubset<T, contasFindUniqueArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {contasFindUniqueOrThrowArgs} args - Arguments to find a Contas
     * @example
     * // Get one Contas
     * const contas = await prisma.contas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contasFindUniqueOrThrowArgs>(args: SelectSubset<T, contasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contasFindFirstArgs} args - Arguments to find a Contas
     * @example
     * // Get one Contas
     * const contas = await prisma.contas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contasFindFirstArgs>(args?: SelectSubset<T, contasFindFirstArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contasFindFirstOrThrowArgs} args - Arguments to find a Contas
     * @example
     * // Get one Contas
     * const contas = await prisma.contas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contasFindFirstOrThrowArgs>(args?: SelectSubset<T, contasFindFirstOrThrowArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contas
     * const contas = await prisma.contas.findMany()
     * 
     * // Get first 10 Contas
     * const contas = await prisma.contas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contasWithIdOnly = await prisma.contas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends contasFindManyArgs>(args?: SelectSubset<T, contasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contas.
     * @param {contasCreateArgs} args - Arguments to create a Contas.
     * @example
     * // Create one Contas
     * const Contas = await prisma.contas.create({
     *   data: {
     *     // ... data to create a Contas
     *   }
     * })
     * 
     */
    create<T extends contasCreateArgs>(args: SelectSubset<T, contasCreateArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contas.
     * @param {contasCreateManyArgs} args - Arguments to create many Contas.
     * @example
     * // Create many Contas
     * const contas = await prisma.contas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contasCreateManyArgs>(args?: SelectSubset<T, contasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contas and returns the data saved in the database.
     * @param {contasCreateManyAndReturnArgs} args - Arguments to create many Contas.
     * @example
     * // Create many Contas
     * const contas = await prisma.contas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contas and only return the `id`
     * const contasWithIdOnly = await prisma.contas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends contasCreateManyAndReturnArgs>(args?: SelectSubset<T, contasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contas.
     * @param {contasDeleteArgs} args - Arguments to delete one Contas.
     * @example
     * // Delete one Contas
     * const Contas = await prisma.contas.delete({
     *   where: {
     *     // ... filter to delete one Contas
     *   }
     * })
     * 
     */
    delete<T extends contasDeleteArgs>(args: SelectSubset<T, contasDeleteArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contas.
     * @param {contasUpdateArgs} args - Arguments to update one Contas.
     * @example
     * // Update one Contas
     * const contas = await prisma.contas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contasUpdateArgs>(args: SelectSubset<T, contasUpdateArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contas.
     * @param {contasDeleteManyArgs} args - Arguments to filter Contas to delete.
     * @example
     * // Delete a few Contas
     * const { count } = await prisma.contas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contasDeleteManyArgs>(args?: SelectSubset<T, contasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contas
     * const contas = await prisma.contas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contasUpdateManyArgs>(args: SelectSubset<T, contasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contas.
     * @param {contasUpsertArgs} args - Arguments to update or create a Contas.
     * @example
     * // Update or create a Contas
     * const contas = await prisma.contas.upsert({
     *   create: {
     *     // ... data to create a Contas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contas we want to update
     *   }
     * })
     */
    upsert<T extends contasUpsertArgs>(args: SelectSubset<T, contasUpsertArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contasCountArgs} args - Arguments to filter Contas to count.
     * @example
     * // Count the number of Contas
     * const count = await prisma.contas.count({
     *   where: {
     *     // ... the filter for the Contas we want to count
     *   }
     * })
    **/
    count<T extends contasCountArgs>(
      args?: Subset<T, contasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContasAggregateArgs>(args: Subset<T, ContasAggregateArgs>): Prisma.PrismaPromise<GetContasAggregateType<T>>

    /**
     * Group by Contas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contasGroupByArgs['orderBy'] }
        : { orderBy?: contasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contas model
   */
  readonly fields: contasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transacoes<T extends contas$transacoesArgs<ExtArgs> = {}>(args?: Subset<T, contas$transacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contas model
   */ 
  interface contasFieldRefs {
    readonly id: FieldRef<"contas", 'Int'>
    readonly nome: FieldRef<"contas", 'String'>
    readonly saldo_inicial: FieldRef<"contas", 'Float'>
    readonly criado_em: FieldRef<"contas", 'DateTime'>
    readonly usuario_id: FieldRef<"contas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * contas findUnique
   */
  export type contasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * Filter, which contas to fetch.
     */
    where: contasWhereUniqueInput
  }

  /**
   * contas findUniqueOrThrow
   */
  export type contasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * Filter, which contas to fetch.
     */
    where: contasWhereUniqueInput
  }

  /**
   * contas findFirst
   */
  export type contasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * Filter, which contas to fetch.
     */
    where?: contasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contas to fetch.
     */
    orderBy?: contasOrderByWithRelationInput | contasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contas.
     */
    cursor?: contasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contas.
     */
    distinct?: ContasScalarFieldEnum | ContasScalarFieldEnum[]
  }

  /**
   * contas findFirstOrThrow
   */
  export type contasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * Filter, which contas to fetch.
     */
    where?: contasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contas to fetch.
     */
    orderBy?: contasOrderByWithRelationInput | contasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contas.
     */
    cursor?: contasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contas.
     */
    distinct?: ContasScalarFieldEnum | ContasScalarFieldEnum[]
  }

  /**
   * contas findMany
   */
  export type contasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * Filter, which contas to fetch.
     */
    where?: contasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contas to fetch.
     */
    orderBy?: contasOrderByWithRelationInput | contasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contas.
     */
    cursor?: contasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contas.
     */
    skip?: number
    distinct?: ContasScalarFieldEnum | ContasScalarFieldEnum[]
  }

  /**
   * contas create
   */
  export type contasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * The data needed to create a contas.
     */
    data: XOR<contasCreateInput, contasUncheckedCreateInput>
  }

  /**
   * contas createMany
   */
  export type contasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contas.
     */
    data: contasCreateManyInput | contasCreateManyInput[]
  }

  /**
   * contas createManyAndReturn
   */
  export type contasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many contas.
     */
    data: contasCreateManyInput | contasCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * contas update
   */
  export type contasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * The data needed to update a contas.
     */
    data: XOR<contasUpdateInput, contasUncheckedUpdateInput>
    /**
     * Choose, which contas to update.
     */
    where: contasWhereUniqueInput
  }

  /**
   * contas updateMany
   */
  export type contasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contas.
     */
    data: XOR<contasUpdateManyMutationInput, contasUncheckedUpdateManyInput>
    /**
     * Filter which contas to update
     */
    where?: contasWhereInput
  }

  /**
   * contas upsert
   */
  export type contasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * The filter to search for the contas to update in case it exists.
     */
    where: contasWhereUniqueInput
    /**
     * In case the contas found by the `where` argument doesn't exist, create a new contas with this data.
     */
    create: XOR<contasCreateInput, contasUncheckedCreateInput>
    /**
     * In case the contas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contasUpdateInput, contasUncheckedUpdateInput>
  }

  /**
   * contas delete
   */
  export type contasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
    /**
     * Filter which contas to delete.
     */
    where: contasWhereUniqueInput
  }

  /**
   * contas deleteMany
   */
  export type contasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contas to delete
     */
    where?: contasWhereInput
  }

  /**
   * contas.transacoes
   */
  export type contas$transacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    where?: transacoesWhereInput
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    cursor?: transacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransacoesScalarFieldEnum | TransacoesScalarFieldEnum[]
  }

  /**
   * contas without action
   */
  export type contasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contas
     */
    select?: contasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contasInclude<ExtArgs> | null
  }


  /**
   * Model transacoes
   */

  export type AggregateTransacoes = {
    _count: TransacoesCountAggregateOutputType | null
    _avg: TransacoesAvgAggregateOutputType | null
    _sum: TransacoesSumAggregateOutputType | null
    _min: TransacoesMinAggregateOutputType | null
    _max: TransacoesMaxAggregateOutputType | null
  }

  export type TransacoesAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    conta_id: number | null
    valor: number | null
  }

  export type TransacoesSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    conta_id: number | null
    valor: number | null
  }

  export type TransacoesMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    conta_id: number | null
    valor: number | null
    tipo: string | null
    descricao: string | null
    data_transacao: Date | null
    criado_em: Date | null
  }

  export type TransacoesMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    conta_id: number | null
    valor: number | null
    tipo: string | null
    descricao: string | null
    data_transacao: Date | null
    criado_em: Date | null
  }

  export type TransacoesCountAggregateOutputType = {
    id: number
    usuario_id: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: number
    descricao: number
    data_transacao: number
    criado_em: number
    _all: number
  }


  export type TransacoesAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    conta_id?: true
    valor?: true
  }

  export type TransacoesSumAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    conta_id?: true
    valor?: true
  }

  export type TransacoesMinAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    conta_id?: true
    valor?: true
    tipo?: true
    descricao?: true
    data_transacao?: true
    criado_em?: true
  }

  export type TransacoesMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    conta_id?: true
    valor?: true
    tipo?: true
    descricao?: true
    data_transacao?: true
    criado_em?: true
  }

  export type TransacoesCountAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    conta_id?: true
    valor?: true
    tipo?: true
    descricao?: true
    data_transacao?: true
    criado_em?: true
    _all?: true
  }

  export type TransacoesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transacoes to aggregate.
     */
    where?: transacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transacoes to fetch.
     */
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transacoes
    **/
    _count?: true | TransacoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransacoesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransacoesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransacoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransacoesMaxAggregateInputType
  }

  export type GetTransacoesAggregateType<T extends TransacoesAggregateArgs> = {
        [P in keyof T & keyof AggregateTransacoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransacoes[P]>
      : GetScalarType<T[P], AggregateTransacoes[P]>
  }




  export type transacoesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transacoesWhereInput
    orderBy?: transacoesOrderByWithAggregationInput | transacoesOrderByWithAggregationInput[]
    by: TransacoesScalarFieldEnum[] | TransacoesScalarFieldEnum
    having?: transacoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransacoesCountAggregateInputType | true
    _avg?: TransacoesAvgAggregateInputType
    _sum?: TransacoesSumAggregateInputType
    _min?: TransacoesMinAggregateInputType
    _max?: TransacoesMaxAggregateInputType
  }

  export type TransacoesGroupByOutputType = {
    id: number
    usuario_id: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao: string | null
    data_transacao: Date
    criado_em: Date
    _count: TransacoesCountAggregateOutputType | null
    _avg: TransacoesAvgAggregateOutputType | null
    _sum: TransacoesSumAggregateOutputType | null
    _min: TransacoesMinAggregateOutputType | null
    _max: TransacoesMaxAggregateOutputType | null
  }

  type GetTransacoesGroupByPayload<T extends transacoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransacoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransacoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransacoesGroupByOutputType[P]>
            : GetScalarType<T[P], TransacoesGroupByOutputType[P]>
        }
      >
    >


  export type transacoesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    categoria_id?: boolean
    conta_id?: boolean
    valor?: boolean
    tipo?: boolean
    descricao?: boolean
    data_transacao?: boolean
    criado_em?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
    conta?: boolean | contasDefaultArgs<ExtArgs>
    parcelas?: boolean | transacoes$parcelasArgs<ExtArgs>
    _count?: boolean | TransacoesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transacoes"]>

  export type transacoesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    categoria_id?: boolean
    conta_id?: boolean
    valor?: boolean
    tipo?: boolean
    descricao?: boolean
    data_transacao?: boolean
    criado_em?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
    conta?: boolean | contasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transacoes"]>

  export type transacoesSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    categoria_id?: boolean
    conta_id?: boolean
    valor?: boolean
    tipo?: boolean
    descricao?: boolean
    data_transacao?: boolean
    criado_em?: boolean
  }

  export type transacoesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
    conta?: boolean | contasDefaultArgs<ExtArgs>
    parcelas?: boolean | transacoes$parcelasArgs<ExtArgs>
    _count?: boolean | TransacoesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type transacoesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
    conta?: boolean | contasDefaultArgs<ExtArgs>
  }

  export type $transacoesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transacoes"
    objects: {
      usuario: Prisma.$usuariosPayload<ExtArgs>
      categoria: Prisma.$categoriasPayload<ExtArgs>
      conta: Prisma.$contasPayload<ExtArgs>
      parcelas: Prisma.$parcelasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      categoria_id: number
      conta_id: number
      valor: number
      tipo: string
      descricao: string | null
      data_transacao: Date
      criado_em: Date
    }, ExtArgs["result"]["transacoes"]>
    composites: {}
  }

  type transacoesGetPayload<S extends boolean | null | undefined | transacoesDefaultArgs> = $Result.GetResult<Prisma.$transacoesPayload, S>

  type transacoesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transacoesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransacoesCountAggregateInputType | true
    }

  export interface transacoesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transacoes'], meta: { name: 'transacoes' } }
    /**
     * Find zero or one Transacoes that matches the filter.
     * @param {transacoesFindUniqueArgs} args - Arguments to find a Transacoes
     * @example
     * // Get one Transacoes
     * const transacoes = await prisma.transacoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transacoesFindUniqueArgs>(args: SelectSubset<T, transacoesFindUniqueArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transacoes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {transacoesFindUniqueOrThrowArgs} args - Arguments to find a Transacoes
     * @example
     * // Get one Transacoes
     * const transacoes = await prisma.transacoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transacoesFindUniqueOrThrowArgs>(args: SelectSubset<T, transacoesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transacoesFindFirstArgs} args - Arguments to find a Transacoes
     * @example
     * // Get one Transacoes
     * const transacoes = await prisma.transacoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transacoesFindFirstArgs>(args?: SelectSubset<T, transacoesFindFirstArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transacoes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transacoesFindFirstOrThrowArgs} args - Arguments to find a Transacoes
     * @example
     * // Get one Transacoes
     * const transacoes = await prisma.transacoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transacoesFindFirstOrThrowArgs>(args?: SelectSubset<T, transacoesFindFirstOrThrowArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transacoesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transacoes
     * const transacoes = await prisma.transacoes.findMany()
     * 
     * // Get first 10 Transacoes
     * const transacoes = await prisma.transacoes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transacoesWithIdOnly = await prisma.transacoes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transacoesFindManyArgs>(args?: SelectSubset<T, transacoesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transacoes.
     * @param {transacoesCreateArgs} args - Arguments to create a Transacoes.
     * @example
     * // Create one Transacoes
     * const Transacoes = await prisma.transacoes.create({
     *   data: {
     *     // ... data to create a Transacoes
     *   }
     * })
     * 
     */
    create<T extends transacoesCreateArgs>(args: SelectSubset<T, transacoesCreateArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transacoes.
     * @param {transacoesCreateManyArgs} args - Arguments to create many Transacoes.
     * @example
     * // Create many Transacoes
     * const transacoes = await prisma.transacoes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transacoesCreateManyArgs>(args?: SelectSubset<T, transacoesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transacoes and returns the data saved in the database.
     * @param {transacoesCreateManyAndReturnArgs} args - Arguments to create many Transacoes.
     * @example
     * // Create many Transacoes
     * const transacoes = await prisma.transacoes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transacoes and only return the `id`
     * const transacoesWithIdOnly = await prisma.transacoes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transacoesCreateManyAndReturnArgs>(args?: SelectSubset<T, transacoesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transacoes.
     * @param {transacoesDeleteArgs} args - Arguments to delete one Transacoes.
     * @example
     * // Delete one Transacoes
     * const Transacoes = await prisma.transacoes.delete({
     *   where: {
     *     // ... filter to delete one Transacoes
     *   }
     * })
     * 
     */
    delete<T extends transacoesDeleteArgs>(args: SelectSubset<T, transacoesDeleteArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transacoes.
     * @param {transacoesUpdateArgs} args - Arguments to update one Transacoes.
     * @example
     * // Update one Transacoes
     * const transacoes = await prisma.transacoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transacoesUpdateArgs>(args: SelectSubset<T, transacoesUpdateArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transacoes.
     * @param {transacoesDeleteManyArgs} args - Arguments to filter Transacoes to delete.
     * @example
     * // Delete a few Transacoes
     * const { count } = await prisma.transacoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transacoesDeleteManyArgs>(args?: SelectSubset<T, transacoesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transacoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transacoes
     * const transacoes = await prisma.transacoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transacoesUpdateManyArgs>(args: SelectSubset<T, transacoesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transacoes.
     * @param {transacoesUpsertArgs} args - Arguments to update or create a Transacoes.
     * @example
     * // Update or create a Transacoes
     * const transacoes = await prisma.transacoes.upsert({
     *   create: {
     *     // ... data to create a Transacoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transacoes we want to update
     *   }
     * })
     */
    upsert<T extends transacoesUpsertArgs>(args: SelectSubset<T, transacoesUpsertArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transacoesCountArgs} args - Arguments to filter Transacoes to count.
     * @example
     * // Count the number of Transacoes
     * const count = await prisma.transacoes.count({
     *   where: {
     *     // ... the filter for the Transacoes we want to count
     *   }
     * })
    **/
    count<T extends transacoesCountArgs>(
      args?: Subset<T, transacoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransacoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransacoesAggregateArgs>(args: Subset<T, TransacoesAggregateArgs>): Prisma.PrismaPromise<GetTransacoesAggregateType<T>>

    /**
     * Group by Transacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transacoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transacoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transacoesGroupByArgs['orderBy'] }
        : { orderBy?: transacoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transacoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransacoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transacoes model
   */
  readonly fields: transacoesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transacoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transacoesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    categoria<T extends categoriasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriasDefaultArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conta<T extends contasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contasDefaultArgs<ExtArgs>>): Prisma__contasClient<$Result.GetResult<Prisma.$contasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parcelas<T extends transacoes$parcelasArgs<ExtArgs> = {}>(args?: Subset<T, transacoes$parcelasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transacoes model
   */ 
  interface transacoesFieldRefs {
    readonly id: FieldRef<"transacoes", 'Int'>
    readonly usuario_id: FieldRef<"transacoes", 'Int'>
    readonly categoria_id: FieldRef<"transacoes", 'Int'>
    readonly conta_id: FieldRef<"transacoes", 'Int'>
    readonly valor: FieldRef<"transacoes", 'Float'>
    readonly tipo: FieldRef<"transacoes", 'String'>
    readonly descricao: FieldRef<"transacoes", 'String'>
    readonly data_transacao: FieldRef<"transacoes", 'DateTime'>
    readonly criado_em: FieldRef<"transacoes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * transacoes findUnique
   */
  export type transacoesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * Filter, which transacoes to fetch.
     */
    where: transacoesWhereUniqueInput
  }

  /**
   * transacoes findUniqueOrThrow
   */
  export type transacoesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * Filter, which transacoes to fetch.
     */
    where: transacoesWhereUniqueInput
  }

  /**
   * transacoes findFirst
   */
  export type transacoesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * Filter, which transacoes to fetch.
     */
    where?: transacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transacoes to fetch.
     */
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transacoes.
     */
    cursor?: transacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transacoes.
     */
    distinct?: TransacoesScalarFieldEnum | TransacoesScalarFieldEnum[]
  }

  /**
   * transacoes findFirstOrThrow
   */
  export type transacoesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * Filter, which transacoes to fetch.
     */
    where?: transacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transacoes to fetch.
     */
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transacoes.
     */
    cursor?: transacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transacoes.
     */
    distinct?: TransacoesScalarFieldEnum | TransacoesScalarFieldEnum[]
  }

  /**
   * transacoes findMany
   */
  export type transacoesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * Filter, which transacoes to fetch.
     */
    where?: transacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transacoes to fetch.
     */
    orderBy?: transacoesOrderByWithRelationInput | transacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transacoes.
     */
    cursor?: transacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transacoes.
     */
    skip?: number
    distinct?: TransacoesScalarFieldEnum | TransacoesScalarFieldEnum[]
  }

  /**
   * transacoes create
   */
  export type transacoesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * The data needed to create a transacoes.
     */
    data: XOR<transacoesCreateInput, transacoesUncheckedCreateInput>
  }

  /**
   * transacoes createMany
   */
  export type transacoesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transacoes.
     */
    data: transacoesCreateManyInput | transacoesCreateManyInput[]
  }

  /**
   * transacoes createManyAndReturn
   */
  export type transacoesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many transacoes.
     */
    data: transacoesCreateManyInput | transacoesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transacoes update
   */
  export type transacoesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * The data needed to update a transacoes.
     */
    data: XOR<transacoesUpdateInput, transacoesUncheckedUpdateInput>
    /**
     * Choose, which transacoes to update.
     */
    where: transacoesWhereUniqueInput
  }

  /**
   * transacoes updateMany
   */
  export type transacoesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transacoes.
     */
    data: XOR<transacoesUpdateManyMutationInput, transacoesUncheckedUpdateManyInput>
    /**
     * Filter which transacoes to update
     */
    where?: transacoesWhereInput
  }

  /**
   * transacoes upsert
   */
  export type transacoesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * The filter to search for the transacoes to update in case it exists.
     */
    where: transacoesWhereUniqueInput
    /**
     * In case the transacoes found by the `where` argument doesn't exist, create a new transacoes with this data.
     */
    create: XOR<transacoesCreateInput, transacoesUncheckedCreateInput>
    /**
     * In case the transacoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transacoesUpdateInput, transacoesUncheckedUpdateInput>
  }

  /**
   * transacoes delete
   */
  export type transacoesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
    /**
     * Filter which transacoes to delete.
     */
    where: transacoesWhereUniqueInput
  }

  /**
   * transacoes deleteMany
   */
  export type transacoesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transacoes to delete
     */
    where?: transacoesWhereInput
  }

  /**
   * transacoes.parcelas
   */
  export type transacoes$parcelasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    where?: parcelasWhereInput
    orderBy?: parcelasOrderByWithRelationInput | parcelasOrderByWithRelationInput[]
    cursor?: parcelasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParcelasScalarFieldEnum | ParcelasScalarFieldEnum[]
  }

  /**
   * transacoes without action
   */
  export type transacoesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transacoes
     */
    select?: transacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transacoesInclude<ExtArgs> | null
  }


  /**
   * Model parcelas
   */

  export type AggregateParcelas = {
    _count: ParcelasCountAggregateOutputType | null
    _avg: ParcelasAvgAggregateOutputType | null
    _sum: ParcelasSumAggregateOutputType | null
    _min: ParcelasMinAggregateOutputType | null
    _max: ParcelasMaxAggregateOutputType | null
  }

  export type ParcelasAvgAggregateOutputType = {
    id: number | null
    transacao_id: number | null
    numero_parcela: number | null
    valor: number | null
  }

  export type ParcelasSumAggregateOutputType = {
    id: number | null
    transacao_id: number | null
    numero_parcela: number | null
    valor: number | null
  }

  export type ParcelasMinAggregateOutputType = {
    id: number | null
    transacao_id: number | null
    numero_parcela: number | null
    valor: number | null
    data_vencimento: Date | null
  }

  export type ParcelasMaxAggregateOutputType = {
    id: number | null
    transacao_id: number | null
    numero_parcela: number | null
    valor: number | null
    data_vencimento: Date | null
  }

  export type ParcelasCountAggregateOutputType = {
    id: number
    transacao_id: number
    numero_parcela: number
    valor: number
    data_vencimento: number
    _all: number
  }


  export type ParcelasAvgAggregateInputType = {
    id?: true
    transacao_id?: true
    numero_parcela?: true
    valor?: true
  }

  export type ParcelasSumAggregateInputType = {
    id?: true
    transacao_id?: true
    numero_parcela?: true
    valor?: true
  }

  export type ParcelasMinAggregateInputType = {
    id?: true
    transacao_id?: true
    numero_parcela?: true
    valor?: true
    data_vencimento?: true
  }

  export type ParcelasMaxAggregateInputType = {
    id?: true
    transacao_id?: true
    numero_parcela?: true
    valor?: true
    data_vencimento?: true
  }

  export type ParcelasCountAggregateInputType = {
    id?: true
    transacao_id?: true
    numero_parcela?: true
    valor?: true
    data_vencimento?: true
    _all?: true
  }

  export type ParcelasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which parcelas to aggregate.
     */
    where?: parcelasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parcelas to fetch.
     */
    orderBy?: parcelasOrderByWithRelationInput | parcelasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: parcelasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned parcelas
    **/
    _count?: true | ParcelasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParcelasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParcelasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParcelasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParcelasMaxAggregateInputType
  }

  export type GetParcelasAggregateType<T extends ParcelasAggregateArgs> = {
        [P in keyof T & keyof AggregateParcelas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParcelas[P]>
      : GetScalarType<T[P], AggregateParcelas[P]>
  }




  export type parcelasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: parcelasWhereInput
    orderBy?: parcelasOrderByWithAggregationInput | parcelasOrderByWithAggregationInput[]
    by: ParcelasScalarFieldEnum[] | ParcelasScalarFieldEnum
    having?: parcelasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParcelasCountAggregateInputType | true
    _avg?: ParcelasAvgAggregateInputType
    _sum?: ParcelasSumAggregateInputType
    _min?: ParcelasMinAggregateInputType
    _max?: ParcelasMaxAggregateInputType
  }

  export type ParcelasGroupByOutputType = {
    id: number
    transacao_id: number
    numero_parcela: number
    valor: number
    data_vencimento: Date
    _count: ParcelasCountAggregateOutputType | null
    _avg: ParcelasAvgAggregateOutputType | null
    _sum: ParcelasSumAggregateOutputType | null
    _min: ParcelasMinAggregateOutputType | null
    _max: ParcelasMaxAggregateOutputType | null
  }

  type GetParcelasGroupByPayload<T extends parcelasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParcelasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParcelasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParcelasGroupByOutputType[P]>
            : GetScalarType<T[P], ParcelasGroupByOutputType[P]>
        }
      >
    >


  export type parcelasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transacao_id?: boolean
    numero_parcela?: boolean
    valor?: boolean
    data_vencimento?: boolean
    transacao?: boolean | transacoesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parcelas"]>

  export type parcelasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transacao_id?: boolean
    numero_parcela?: boolean
    valor?: boolean
    data_vencimento?: boolean
    transacao?: boolean | transacoesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parcelas"]>

  export type parcelasSelectScalar = {
    id?: boolean
    transacao_id?: boolean
    numero_parcela?: boolean
    valor?: boolean
    data_vencimento?: boolean
  }

  export type parcelasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transacao?: boolean | transacoesDefaultArgs<ExtArgs>
  }
  export type parcelasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transacao?: boolean | transacoesDefaultArgs<ExtArgs>
  }

  export type $parcelasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "parcelas"
    objects: {
      transacao: Prisma.$transacoesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transacao_id: number
      numero_parcela: number
      valor: number
      data_vencimento: Date
    }, ExtArgs["result"]["parcelas"]>
    composites: {}
  }

  type parcelasGetPayload<S extends boolean | null | undefined | parcelasDefaultArgs> = $Result.GetResult<Prisma.$parcelasPayload, S>

  type parcelasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<parcelasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParcelasCountAggregateInputType | true
    }

  export interface parcelasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['parcelas'], meta: { name: 'parcelas' } }
    /**
     * Find zero or one Parcelas that matches the filter.
     * @param {parcelasFindUniqueArgs} args - Arguments to find a Parcelas
     * @example
     * // Get one Parcelas
     * const parcelas = await prisma.parcelas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends parcelasFindUniqueArgs>(args: SelectSubset<T, parcelasFindUniqueArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Parcelas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {parcelasFindUniqueOrThrowArgs} args - Arguments to find a Parcelas
     * @example
     * // Get one Parcelas
     * const parcelas = await prisma.parcelas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends parcelasFindUniqueOrThrowArgs>(args: SelectSubset<T, parcelasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Parcelas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parcelasFindFirstArgs} args - Arguments to find a Parcelas
     * @example
     * // Get one Parcelas
     * const parcelas = await prisma.parcelas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends parcelasFindFirstArgs>(args?: SelectSubset<T, parcelasFindFirstArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Parcelas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parcelasFindFirstOrThrowArgs} args - Arguments to find a Parcelas
     * @example
     * // Get one Parcelas
     * const parcelas = await prisma.parcelas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends parcelasFindFirstOrThrowArgs>(args?: SelectSubset<T, parcelasFindFirstOrThrowArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parcelas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parcelasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parcelas
     * const parcelas = await prisma.parcelas.findMany()
     * 
     * // Get first 10 Parcelas
     * const parcelas = await prisma.parcelas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parcelasWithIdOnly = await prisma.parcelas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends parcelasFindManyArgs>(args?: SelectSubset<T, parcelasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Parcelas.
     * @param {parcelasCreateArgs} args - Arguments to create a Parcelas.
     * @example
     * // Create one Parcelas
     * const Parcelas = await prisma.parcelas.create({
     *   data: {
     *     // ... data to create a Parcelas
     *   }
     * })
     * 
     */
    create<T extends parcelasCreateArgs>(args: SelectSubset<T, parcelasCreateArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parcelas.
     * @param {parcelasCreateManyArgs} args - Arguments to create many Parcelas.
     * @example
     * // Create many Parcelas
     * const parcelas = await prisma.parcelas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends parcelasCreateManyArgs>(args?: SelectSubset<T, parcelasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parcelas and returns the data saved in the database.
     * @param {parcelasCreateManyAndReturnArgs} args - Arguments to create many Parcelas.
     * @example
     * // Create many Parcelas
     * const parcelas = await prisma.parcelas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parcelas and only return the `id`
     * const parcelasWithIdOnly = await prisma.parcelas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends parcelasCreateManyAndReturnArgs>(args?: SelectSubset<T, parcelasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Parcelas.
     * @param {parcelasDeleteArgs} args - Arguments to delete one Parcelas.
     * @example
     * // Delete one Parcelas
     * const Parcelas = await prisma.parcelas.delete({
     *   where: {
     *     // ... filter to delete one Parcelas
     *   }
     * })
     * 
     */
    delete<T extends parcelasDeleteArgs>(args: SelectSubset<T, parcelasDeleteArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Parcelas.
     * @param {parcelasUpdateArgs} args - Arguments to update one Parcelas.
     * @example
     * // Update one Parcelas
     * const parcelas = await prisma.parcelas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends parcelasUpdateArgs>(args: SelectSubset<T, parcelasUpdateArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parcelas.
     * @param {parcelasDeleteManyArgs} args - Arguments to filter Parcelas to delete.
     * @example
     * // Delete a few Parcelas
     * const { count } = await prisma.parcelas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends parcelasDeleteManyArgs>(args?: SelectSubset<T, parcelasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parcelasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parcelas
     * const parcelas = await prisma.parcelas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends parcelasUpdateManyArgs>(args: SelectSubset<T, parcelasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parcelas.
     * @param {parcelasUpsertArgs} args - Arguments to update or create a Parcelas.
     * @example
     * // Update or create a Parcelas
     * const parcelas = await prisma.parcelas.upsert({
     *   create: {
     *     // ... data to create a Parcelas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parcelas we want to update
     *   }
     * })
     */
    upsert<T extends parcelasUpsertArgs>(args: SelectSubset<T, parcelasUpsertArgs<ExtArgs>>): Prisma__parcelasClient<$Result.GetResult<Prisma.$parcelasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parcelasCountArgs} args - Arguments to filter Parcelas to count.
     * @example
     * // Count the number of Parcelas
     * const count = await prisma.parcelas.count({
     *   where: {
     *     // ... the filter for the Parcelas we want to count
     *   }
     * })
    **/
    count<T extends parcelasCountArgs>(
      args?: Subset<T, parcelasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParcelasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParcelasAggregateArgs>(args: Subset<T, ParcelasAggregateArgs>): Prisma.PrismaPromise<GetParcelasAggregateType<T>>

    /**
     * Group by Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parcelasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends parcelasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: parcelasGroupByArgs['orderBy'] }
        : { orderBy?: parcelasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, parcelasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParcelasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the parcelas model
   */
  readonly fields: parcelasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for parcelas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__parcelasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transacao<T extends transacoesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, transacoesDefaultArgs<ExtArgs>>): Prisma__transacoesClient<$Result.GetResult<Prisma.$transacoesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the parcelas model
   */ 
  interface parcelasFieldRefs {
    readonly id: FieldRef<"parcelas", 'Int'>
    readonly transacao_id: FieldRef<"parcelas", 'Int'>
    readonly numero_parcela: FieldRef<"parcelas", 'Int'>
    readonly valor: FieldRef<"parcelas", 'Float'>
    readonly data_vencimento: FieldRef<"parcelas", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * parcelas findUnique
   */
  export type parcelasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * Filter, which parcelas to fetch.
     */
    where: parcelasWhereUniqueInput
  }

  /**
   * parcelas findUniqueOrThrow
   */
  export type parcelasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * Filter, which parcelas to fetch.
     */
    where: parcelasWhereUniqueInput
  }

  /**
   * parcelas findFirst
   */
  export type parcelasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * Filter, which parcelas to fetch.
     */
    where?: parcelasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parcelas to fetch.
     */
    orderBy?: parcelasOrderByWithRelationInput | parcelasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for parcelas.
     */
    cursor?: parcelasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of parcelas.
     */
    distinct?: ParcelasScalarFieldEnum | ParcelasScalarFieldEnum[]
  }

  /**
   * parcelas findFirstOrThrow
   */
  export type parcelasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * Filter, which parcelas to fetch.
     */
    where?: parcelasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parcelas to fetch.
     */
    orderBy?: parcelasOrderByWithRelationInput | parcelasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for parcelas.
     */
    cursor?: parcelasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of parcelas.
     */
    distinct?: ParcelasScalarFieldEnum | ParcelasScalarFieldEnum[]
  }

  /**
   * parcelas findMany
   */
  export type parcelasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * Filter, which parcelas to fetch.
     */
    where?: parcelasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parcelas to fetch.
     */
    orderBy?: parcelasOrderByWithRelationInput | parcelasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing parcelas.
     */
    cursor?: parcelasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parcelas.
     */
    skip?: number
    distinct?: ParcelasScalarFieldEnum | ParcelasScalarFieldEnum[]
  }

  /**
   * parcelas create
   */
  export type parcelasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * The data needed to create a parcelas.
     */
    data: XOR<parcelasCreateInput, parcelasUncheckedCreateInput>
  }

  /**
   * parcelas createMany
   */
  export type parcelasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many parcelas.
     */
    data: parcelasCreateManyInput | parcelasCreateManyInput[]
  }

  /**
   * parcelas createManyAndReturn
   */
  export type parcelasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many parcelas.
     */
    data: parcelasCreateManyInput | parcelasCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * parcelas update
   */
  export type parcelasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * The data needed to update a parcelas.
     */
    data: XOR<parcelasUpdateInput, parcelasUncheckedUpdateInput>
    /**
     * Choose, which parcelas to update.
     */
    where: parcelasWhereUniqueInput
  }

  /**
   * parcelas updateMany
   */
  export type parcelasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update parcelas.
     */
    data: XOR<parcelasUpdateManyMutationInput, parcelasUncheckedUpdateManyInput>
    /**
     * Filter which parcelas to update
     */
    where?: parcelasWhereInput
  }

  /**
   * parcelas upsert
   */
  export type parcelasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * The filter to search for the parcelas to update in case it exists.
     */
    where: parcelasWhereUniqueInput
    /**
     * In case the parcelas found by the `where` argument doesn't exist, create a new parcelas with this data.
     */
    create: XOR<parcelasCreateInput, parcelasUncheckedCreateInput>
    /**
     * In case the parcelas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<parcelasUpdateInput, parcelasUncheckedUpdateInput>
  }

  /**
   * parcelas delete
   */
  export type parcelasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
    /**
     * Filter which parcelas to delete.
     */
    where: parcelasWhereUniqueInput
  }

  /**
   * parcelas deleteMany
   */
  export type parcelasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which parcelas to delete
     */
    where?: parcelasWhereInput
  }

  /**
   * parcelas without action
   */
  export type parcelasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the parcelas
     */
    select?: parcelasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: parcelasInclude<ExtArgs> | null
  }


  /**
   * Model orcamentos
   */

  export type AggregateOrcamentos = {
    _count: OrcamentosCountAggregateOutputType | null
    _avg: OrcamentosAvgAggregateOutputType | null
    _sum: OrcamentosSumAggregateOutputType | null
    _min: OrcamentosMinAggregateOutputType | null
    _max: OrcamentosMaxAggregateOutputType | null
  }

  export type OrcamentosAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    valor_limite: number | null
  }

  export type OrcamentosSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    valor_limite: number | null
  }

  export type OrcamentosMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    valor_limite: number | null
    periodo: string | null
    criado_em: Date | null
  }

  export type OrcamentosMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    categoria_id: number | null
    valor_limite: number | null
    periodo: string | null
    criado_em: Date | null
  }

  export type OrcamentosCountAggregateOutputType = {
    id: number
    usuario_id: number
    categoria_id: number
    valor_limite: number
    periodo: number
    criado_em: number
    _all: number
  }


  export type OrcamentosAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    valor_limite?: true
  }

  export type OrcamentosSumAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    valor_limite?: true
  }

  export type OrcamentosMinAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    valor_limite?: true
    periodo?: true
    criado_em?: true
  }

  export type OrcamentosMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    valor_limite?: true
    periodo?: true
    criado_em?: true
  }

  export type OrcamentosCountAggregateInputType = {
    id?: true
    usuario_id?: true
    categoria_id?: true
    valor_limite?: true
    periodo?: true
    criado_em?: true
    _all?: true
  }

  export type OrcamentosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orcamentos to aggregate.
     */
    where?: orcamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orcamentos to fetch.
     */
    orderBy?: orcamentosOrderByWithRelationInput | orcamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orcamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orcamentos
    **/
    _count?: true | OrcamentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrcamentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrcamentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrcamentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrcamentosMaxAggregateInputType
  }

  export type GetOrcamentosAggregateType<T extends OrcamentosAggregateArgs> = {
        [P in keyof T & keyof AggregateOrcamentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrcamentos[P]>
      : GetScalarType<T[P], AggregateOrcamentos[P]>
  }




  export type orcamentosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orcamentosWhereInput
    orderBy?: orcamentosOrderByWithAggregationInput | orcamentosOrderByWithAggregationInput[]
    by: OrcamentosScalarFieldEnum[] | OrcamentosScalarFieldEnum
    having?: orcamentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrcamentosCountAggregateInputType | true
    _avg?: OrcamentosAvgAggregateInputType
    _sum?: OrcamentosSumAggregateInputType
    _min?: OrcamentosMinAggregateInputType
    _max?: OrcamentosMaxAggregateInputType
  }

  export type OrcamentosGroupByOutputType = {
    id: number
    usuario_id: number
    categoria_id: number
    valor_limite: number
    periodo: string
    criado_em: Date
    _count: OrcamentosCountAggregateOutputType | null
    _avg: OrcamentosAvgAggregateOutputType | null
    _sum: OrcamentosSumAggregateOutputType | null
    _min: OrcamentosMinAggregateOutputType | null
    _max: OrcamentosMaxAggregateOutputType | null
  }

  type GetOrcamentosGroupByPayload<T extends orcamentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrcamentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrcamentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrcamentosGroupByOutputType[P]>
            : GetScalarType<T[P], OrcamentosGroupByOutputType[P]>
        }
      >
    >


  export type orcamentosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    categoria_id?: boolean
    valor_limite?: boolean
    periodo?: boolean
    criado_em?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orcamentos"]>

  export type orcamentosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    categoria_id?: boolean
    valor_limite?: boolean
    periodo?: boolean
    criado_em?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orcamentos"]>

  export type orcamentosSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    categoria_id?: boolean
    valor_limite?: boolean
    periodo?: boolean
    criado_em?: boolean
  }

  export type orcamentosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
  }
  export type orcamentosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
    categoria?: boolean | categoriasDefaultArgs<ExtArgs>
  }

  export type $orcamentosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orcamentos"
    objects: {
      usuario: Prisma.$usuariosPayload<ExtArgs>
      categoria: Prisma.$categoriasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      categoria_id: number
      valor_limite: number
      periodo: string
      criado_em: Date
    }, ExtArgs["result"]["orcamentos"]>
    composites: {}
  }

  type orcamentosGetPayload<S extends boolean | null | undefined | orcamentosDefaultArgs> = $Result.GetResult<Prisma.$orcamentosPayload, S>

  type orcamentosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<orcamentosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrcamentosCountAggregateInputType | true
    }

  export interface orcamentosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orcamentos'], meta: { name: 'orcamentos' } }
    /**
     * Find zero or one Orcamentos that matches the filter.
     * @param {orcamentosFindUniqueArgs} args - Arguments to find a Orcamentos
     * @example
     * // Get one Orcamentos
     * const orcamentos = await prisma.orcamentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orcamentosFindUniqueArgs>(args: SelectSubset<T, orcamentosFindUniqueArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orcamentos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {orcamentosFindUniqueOrThrowArgs} args - Arguments to find a Orcamentos
     * @example
     * // Get one Orcamentos
     * const orcamentos = await prisma.orcamentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orcamentosFindUniqueOrThrowArgs>(args: SelectSubset<T, orcamentosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orcamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orcamentosFindFirstArgs} args - Arguments to find a Orcamentos
     * @example
     * // Get one Orcamentos
     * const orcamentos = await prisma.orcamentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orcamentosFindFirstArgs>(args?: SelectSubset<T, orcamentosFindFirstArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orcamentos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orcamentosFindFirstOrThrowArgs} args - Arguments to find a Orcamentos
     * @example
     * // Get one Orcamentos
     * const orcamentos = await prisma.orcamentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orcamentosFindFirstOrThrowArgs>(args?: SelectSubset<T, orcamentosFindFirstOrThrowArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orcamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orcamentosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orcamentos
     * const orcamentos = await prisma.orcamentos.findMany()
     * 
     * // Get first 10 Orcamentos
     * const orcamentos = await prisma.orcamentos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orcamentosWithIdOnly = await prisma.orcamentos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orcamentosFindManyArgs>(args?: SelectSubset<T, orcamentosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orcamentos.
     * @param {orcamentosCreateArgs} args - Arguments to create a Orcamentos.
     * @example
     * // Create one Orcamentos
     * const Orcamentos = await prisma.orcamentos.create({
     *   data: {
     *     // ... data to create a Orcamentos
     *   }
     * })
     * 
     */
    create<T extends orcamentosCreateArgs>(args: SelectSubset<T, orcamentosCreateArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orcamentos.
     * @param {orcamentosCreateManyArgs} args - Arguments to create many Orcamentos.
     * @example
     * // Create many Orcamentos
     * const orcamentos = await prisma.orcamentos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orcamentosCreateManyArgs>(args?: SelectSubset<T, orcamentosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orcamentos and returns the data saved in the database.
     * @param {orcamentosCreateManyAndReturnArgs} args - Arguments to create many Orcamentos.
     * @example
     * // Create many Orcamentos
     * const orcamentos = await prisma.orcamentos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orcamentos and only return the `id`
     * const orcamentosWithIdOnly = await prisma.orcamentos.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends orcamentosCreateManyAndReturnArgs>(args?: SelectSubset<T, orcamentosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Orcamentos.
     * @param {orcamentosDeleteArgs} args - Arguments to delete one Orcamentos.
     * @example
     * // Delete one Orcamentos
     * const Orcamentos = await prisma.orcamentos.delete({
     *   where: {
     *     // ... filter to delete one Orcamentos
     *   }
     * })
     * 
     */
    delete<T extends orcamentosDeleteArgs>(args: SelectSubset<T, orcamentosDeleteArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orcamentos.
     * @param {orcamentosUpdateArgs} args - Arguments to update one Orcamentos.
     * @example
     * // Update one Orcamentos
     * const orcamentos = await prisma.orcamentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orcamentosUpdateArgs>(args: SelectSubset<T, orcamentosUpdateArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orcamentos.
     * @param {orcamentosDeleteManyArgs} args - Arguments to filter Orcamentos to delete.
     * @example
     * // Delete a few Orcamentos
     * const { count } = await prisma.orcamentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orcamentosDeleteManyArgs>(args?: SelectSubset<T, orcamentosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orcamentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orcamentos
     * const orcamentos = await prisma.orcamentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orcamentosUpdateManyArgs>(args: SelectSubset<T, orcamentosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orcamentos.
     * @param {orcamentosUpsertArgs} args - Arguments to update or create a Orcamentos.
     * @example
     * // Update or create a Orcamentos
     * const orcamentos = await prisma.orcamentos.upsert({
     *   create: {
     *     // ... data to create a Orcamentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orcamentos we want to update
     *   }
     * })
     */
    upsert<T extends orcamentosUpsertArgs>(args: SelectSubset<T, orcamentosUpsertArgs<ExtArgs>>): Prisma__orcamentosClient<$Result.GetResult<Prisma.$orcamentosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orcamentosCountArgs} args - Arguments to filter Orcamentos to count.
     * @example
     * // Count the number of Orcamentos
     * const count = await prisma.orcamentos.count({
     *   where: {
     *     // ... the filter for the Orcamentos we want to count
     *   }
     * })
    **/
    count<T extends orcamentosCountArgs>(
      args?: Subset<T, orcamentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrcamentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrcamentosAggregateArgs>(args: Subset<T, OrcamentosAggregateArgs>): Prisma.PrismaPromise<GetOrcamentosAggregateType<T>>

    /**
     * Group by Orcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orcamentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orcamentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orcamentosGroupByArgs['orderBy'] }
        : { orderBy?: orcamentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orcamentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrcamentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orcamentos model
   */
  readonly fields: orcamentosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orcamentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orcamentosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    categoria<T extends categoriasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriasDefaultArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orcamentos model
   */ 
  interface orcamentosFieldRefs {
    readonly id: FieldRef<"orcamentos", 'Int'>
    readonly usuario_id: FieldRef<"orcamentos", 'Int'>
    readonly categoria_id: FieldRef<"orcamentos", 'Int'>
    readonly valor_limite: FieldRef<"orcamentos", 'Float'>
    readonly periodo: FieldRef<"orcamentos", 'String'>
    readonly criado_em: FieldRef<"orcamentos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * orcamentos findUnique
   */
  export type orcamentosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * Filter, which orcamentos to fetch.
     */
    where: orcamentosWhereUniqueInput
  }

  /**
   * orcamentos findUniqueOrThrow
   */
  export type orcamentosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * Filter, which orcamentos to fetch.
     */
    where: orcamentosWhereUniqueInput
  }

  /**
   * orcamentos findFirst
   */
  export type orcamentosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * Filter, which orcamentos to fetch.
     */
    where?: orcamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orcamentos to fetch.
     */
    orderBy?: orcamentosOrderByWithRelationInput | orcamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orcamentos.
     */
    cursor?: orcamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orcamentos.
     */
    distinct?: OrcamentosScalarFieldEnum | OrcamentosScalarFieldEnum[]
  }

  /**
   * orcamentos findFirstOrThrow
   */
  export type orcamentosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * Filter, which orcamentos to fetch.
     */
    where?: orcamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orcamentos to fetch.
     */
    orderBy?: orcamentosOrderByWithRelationInput | orcamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orcamentos.
     */
    cursor?: orcamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orcamentos.
     */
    distinct?: OrcamentosScalarFieldEnum | OrcamentosScalarFieldEnum[]
  }

  /**
   * orcamentos findMany
   */
  export type orcamentosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * Filter, which orcamentos to fetch.
     */
    where?: orcamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orcamentos to fetch.
     */
    orderBy?: orcamentosOrderByWithRelationInput | orcamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orcamentos.
     */
    cursor?: orcamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orcamentos.
     */
    skip?: number
    distinct?: OrcamentosScalarFieldEnum | OrcamentosScalarFieldEnum[]
  }

  /**
   * orcamentos create
   */
  export type orcamentosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * The data needed to create a orcamentos.
     */
    data: XOR<orcamentosCreateInput, orcamentosUncheckedCreateInput>
  }

  /**
   * orcamentos createMany
   */
  export type orcamentosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orcamentos.
     */
    data: orcamentosCreateManyInput | orcamentosCreateManyInput[]
  }

  /**
   * orcamentos createManyAndReturn
   */
  export type orcamentosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many orcamentos.
     */
    data: orcamentosCreateManyInput | orcamentosCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * orcamentos update
   */
  export type orcamentosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * The data needed to update a orcamentos.
     */
    data: XOR<orcamentosUpdateInput, orcamentosUncheckedUpdateInput>
    /**
     * Choose, which orcamentos to update.
     */
    where: orcamentosWhereUniqueInput
  }

  /**
   * orcamentos updateMany
   */
  export type orcamentosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orcamentos.
     */
    data: XOR<orcamentosUpdateManyMutationInput, orcamentosUncheckedUpdateManyInput>
    /**
     * Filter which orcamentos to update
     */
    where?: orcamentosWhereInput
  }

  /**
   * orcamentos upsert
   */
  export type orcamentosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * The filter to search for the orcamentos to update in case it exists.
     */
    where: orcamentosWhereUniqueInput
    /**
     * In case the orcamentos found by the `where` argument doesn't exist, create a new orcamentos with this data.
     */
    create: XOR<orcamentosCreateInput, orcamentosUncheckedCreateInput>
    /**
     * In case the orcamentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orcamentosUpdateInput, orcamentosUncheckedUpdateInput>
  }

  /**
   * orcamentos delete
   */
  export type orcamentosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
    /**
     * Filter which orcamentos to delete.
     */
    where: orcamentosWhereUniqueInput
  }

  /**
   * orcamentos deleteMany
   */
  export type orcamentosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orcamentos to delete
     */
    where?: orcamentosWhereInput
  }

  /**
   * orcamentos without action
   */
  export type orcamentosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orcamentos
     */
    select?: orcamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orcamentosInclude<ExtArgs> | null
  }


  /**
   * Model metas
   */

  export type AggregateMetas = {
    _count: MetasCountAggregateOutputType | null
    _avg: MetasAvgAggregateOutputType | null
    _sum: MetasSumAggregateOutputType | null
    _min: MetasMinAggregateOutputType | null
    _max: MetasMaxAggregateOutputType | null
  }

  export type MetasAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    valor_meta: number | null
    valor_atual: number | null
  }

  export type MetasSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    valor_meta: number | null
    valor_atual: number | null
  }

  export type MetasMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    nome: string | null
    valor_meta: number | null
    data_limite: Date | null
    valor_atual: number | null
    criado_em: Date | null
  }

  export type MetasMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    nome: string | null
    valor_meta: number | null
    data_limite: Date | null
    valor_atual: number | null
    criado_em: Date | null
  }

  export type MetasCountAggregateOutputType = {
    id: number
    usuario_id: number
    nome: number
    valor_meta: number
    data_limite: number
    valor_atual: number
    criado_em: number
    _all: number
  }


  export type MetasAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    valor_meta?: true
    valor_atual?: true
  }

  export type MetasSumAggregateInputType = {
    id?: true
    usuario_id?: true
    valor_meta?: true
    valor_atual?: true
  }

  export type MetasMinAggregateInputType = {
    id?: true
    usuario_id?: true
    nome?: true
    valor_meta?: true
    data_limite?: true
    valor_atual?: true
    criado_em?: true
  }

  export type MetasMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    nome?: true
    valor_meta?: true
    data_limite?: true
    valor_atual?: true
    criado_em?: true
  }

  export type MetasCountAggregateInputType = {
    id?: true
    usuario_id?: true
    nome?: true
    valor_meta?: true
    data_limite?: true
    valor_atual?: true
    criado_em?: true
    _all?: true
  }

  export type MetasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which metas to aggregate.
     */
    where?: metasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metas to fetch.
     */
    orderBy?: metasOrderByWithRelationInput | metasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: metasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned metas
    **/
    _count?: true | MetasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetasMaxAggregateInputType
  }

  export type GetMetasAggregateType<T extends MetasAggregateArgs> = {
        [P in keyof T & keyof AggregateMetas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetas[P]>
      : GetScalarType<T[P], AggregateMetas[P]>
  }




  export type metasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: metasWhereInput
    orderBy?: metasOrderByWithAggregationInput | metasOrderByWithAggregationInput[]
    by: MetasScalarFieldEnum[] | MetasScalarFieldEnum
    having?: metasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetasCountAggregateInputType | true
    _avg?: MetasAvgAggregateInputType
    _sum?: MetasSumAggregateInputType
    _min?: MetasMinAggregateInputType
    _max?: MetasMaxAggregateInputType
  }

  export type MetasGroupByOutputType = {
    id: number
    usuario_id: number
    nome: string
    valor_meta: number
    data_limite: Date
    valor_atual: number
    criado_em: Date
    _count: MetasCountAggregateOutputType | null
    _avg: MetasAvgAggregateOutputType | null
    _sum: MetasSumAggregateOutputType | null
    _min: MetasMinAggregateOutputType | null
    _max: MetasMaxAggregateOutputType | null
  }

  type GetMetasGroupByPayload<T extends metasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetasGroupByOutputType[P]>
            : GetScalarType<T[P], MetasGroupByOutputType[P]>
        }
      >
    >


  export type metasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    nome?: boolean
    valor_meta?: boolean
    data_limite?: boolean
    valor_atual?: boolean
    criado_em?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metas"]>

  export type metasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    nome?: boolean
    valor_meta?: boolean
    data_limite?: boolean
    valor_atual?: boolean
    criado_em?: boolean
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metas"]>

  export type metasSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    nome?: boolean
    valor_meta?: boolean
    data_limite?: boolean
    valor_atual?: boolean
    criado_em?: boolean
  }

  export type metasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }
  export type metasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $metasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "metas"
    objects: {
      usuario: Prisma.$usuariosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      nome: string
      valor_meta: number
      data_limite: Date
      valor_atual: number
      criado_em: Date
    }, ExtArgs["result"]["metas"]>
    composites: {}
  }

  type metasGetPayload<S extends boolean | null | undefined | metasDefaultArgs> = $Result.GetResult<Prisma.$metasPayload, S>

  type metasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<metasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetasCountAggregateInputType | true
    }

  export interface metasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['metas'], meta: { name: 'metas' } }
    /**
     * Find zero or one Metas that matches the filter.
     * @param {metasFindUniqueArgs} args - Arguments to find a Metas
     * @example
     * // Get one Metas
     * const metas = await prisma.metas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends metasFindUniqueArgs>(args: SelectSubset<T, metasFindUniqueArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Metas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {metasFindUniqueOrThrowArgs} args - Arguments to find a Metas
     * @example
     * // Get one Metas
     * const metas = await prisma.metas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends metasFindUniqueOrThrowArgs>(args: SelectSubset<T, metasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Metas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metasFindFirstArgs} args - Arguments to find a Metas
     * @example
     * // Get one Metas
     * const metas = await prisma.metas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends metasFindFirstArgs>(args?: SelectSubset<T, metasFindFirstArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Metas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metasFindFirstOrThrowArgs} args - Arguments to find a Metas
     * @example
     * // Get one Metas
     * const metas = await prisma.metas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends metasFindFirstOrThrowArgs>(args?: SelectSubset<T, metasFindFirstOrThrowArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Metas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Metas
     * const metas = await prisma.metas.findMany()
     * 
     * // Get first 10 Metas
     * const metas = await prisma.metas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metasWithIdOnly = await prisma.metas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends metasFindManyArgs>(args?: SelectSubset<T, metasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Metas.
     * @param {metasCreateArgs} args - Arguments to create a Metas.
     * @example
     * // Create one Metas
     * const Metas = await prisma.metas.create({
     *   data: {
     *     // ... data to create a Metas
     *   }
     * })
     * 
     */
    create<T extends metasCreateArgs>(args: SelectSubset<T, metasCreateArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Metas.
     * @param {metasCreateManyArgs} args - Arguments to create many Metas.
     * @example
     * // Create many Metas
     * const metas = await prisma.metas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends metasCreateManyArgs>(args?: SelectSubset<T, metasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Metas and returns the data saved in the database.
     * @param {metasCreateManyAndReturnArgs} args - Arguments to create many Metas.
     * @example
     * // Create many Metas
     * const metas = await prisma.metas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Metas and only return the `id`
     * const metasWithIdOnly = await prisma.metas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends metasCreateManyAndReturnArgs>(args?: SelectSubset<T, metasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Metas.
     * @param {metasDeleteArgs} args - Arguments to delete one Metas.
     * @example
     * // Delete one Metas
     * const Metas = await prisma.metas.delete({
     *   where: {
     *     // ... filter to delete one Metas
     *   }
     * })
     * 
     */
    delete<T extends metasDeleteArgs>(args: SelectSubset<T, metasDeleteArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Metas.
     * @param {metasUpdateArgs} args - Arguments to update one Metas.
     * @example
     * // Update one Metas
     * const metas = await prisma.metas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends metasUpdateArgs>(args: SelectSubset<T, metasUpdateArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Metas.
     * @param {metasDeleteManyArgs} args - Arguments to filter Metas to delete.
     * @example
     * // Delete a few Metas
     * const { count } = await prisma.metas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends metasDeleteManyArgs>(args?: SelectSubset<T, metasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Metas
     * const metas = await prisma.metas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends metasUpdateManyArgs>(args: SelectSubset<T, metasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Metas.
     * @param {metasUpsertArgs} args - Arguments to update or create a Metas.
     * @example
     * // Update or create a Metas
     * const metas = await prisma.metas.upsert({
     *   create: {
     *     // ... data to create a Metas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Metas we want to update
     *   }
     * })
     */
    upsert<T extends metasUpsertArgs>(args: SelectSubset<T, metasUpsertArgs<ExtArgs>>): Prisma__metasClient<$Result.GetResult<Prisma.$metasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Metas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metasCountArgs} args - Arguments to filter Metas to count.
     * @example
     * // Count the number of Metas
     * const count = await prisma.metas.count({
     *   where: {
     *     // ... the filter for the Metas we want to count
     *   }
     * })
    **/
    count<T extends metasCountArgs>(
      args?: Subset<T, metasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Metas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetasAggregateArgs>(args: Subset<T, MetasAggregateArgs>): Prisma.PrismaPromise<GetMetasAggregateType<T>>

    /**
     * Group by Metas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends metasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: metasGroupByArgs['orderBy'] }
        : { orderBy?: metasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, metasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the metas model
   */
  readonly fields: metasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for metas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__metasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the metas model
   */ 
  interface metasFieldRefs {
    readonly id: FieldRef<"metas", 'Int'>
    readonly usuario_id: FieldRef<"metas", 'Int'>
    readonly nome: FieldRef<"metas", 'String'>
    readonly valor_meta: FieldRef<"metas", 'Float'>
    readonly data_limite: FieldRef<"metas", 'DateTime'>
    readonly valor_atual: FieldRef<"metas", 'Float'>
    readonly criado_em: FieldRef<"metas", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * metas findUnique
   */
  export type metasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * Filter, which metas to fetch.
     */
    where: metasWhereUniqueInput
  }

  /**
   * metas findUniqueOrThrow
   */
  export type metasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * Filter, which metas to fetch.
     */
    where: metasWhereUniqueInput
  }

  /**
   * metas findFirst
   */
  export type metasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * Filter, which metas to fetch.
     */
    where?: metasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metas to fetch.
     */
    orderBy?: metasOrderByWithRelationInput | metasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for metas.
     */
    cursor?: metasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of metas.
     */
    distinct?: MetasScalarFieldEnum | MetasScalarFieldEnum[]
  }

  /**
   * metas findFirstOrThrow
   */
  export type metasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * Filter, which metas to fetch.
     */
    where?: metasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metas to fetch.
     */
    orderBy?: metasOrderByWithRelationInput | metasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for metas.
     */
    cursor?: metasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of metas.
     */
    distinct?: MetasScalarFieldEnum | MetasScalarFieldEnum[]
  }

  /**
   * metas findMany
   */
  export type metasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * Filter, which metas to fetch.
     */
    where?: metasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metas to fetch.
     */
    orderBy?: metasOrderByWithRelationInput | metasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing metas.
     */
    cursor?: metasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metas.
     */
    skip?: number
    distinct?: MetasScalarFieldEnum | MetasScalarFieldEnum[]
  }

  /**
   * metas create
   */
  export type metasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * The data needed to create a metas.
     */
    data: XOR<metasCreateInput, metasUncheckedCreateInput>
  }

  /**
   * metas createMany
   */
  export type metasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many metas.
     */
    data: metasCreateManyInput | metasCreateManyInput[]
  }

  /**
   * metas createManyAndReturn
   */
  export type metasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many metas.
     */
    data: metasCreateManyInput | metasCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * metas update
   */
  export type metasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * The data needed to update a metas.
     */
    data: XOR<metasUpdateInput, metasUncheckedUpdateInput>
    /**
     * Choose, which metas to update.
     */
    where: metasWhereUniqueInput
  }

  /**
   * metas updateMany
   */
  export type metasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update metas.
     */
    data: XOR<metasUpdateManyMutationInput, metasUncheckedUpdateManyInput>
    /**
     * Filter which metas to update
     */
    where?: metasWhereInput
  }

  /**
   * metas upsert
   */
  export type metasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * The filter to search for the metas to update in case it exists.
     */
    where: metasWhereUniqueInput
    /**
     * In case the metas found by the `where` argument doesn't exist, create a new metas with this data.
     */
    create: XOR<metasCreateInput, metasUncheckedCreateInput>
    /**
     * In case the metas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<metasUpdateInput, metasUncheckedUpdateInput>
  }

  /**
   * metas delete
   */
  export type metasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
    /**
     * Filter which metas to delete.
     */
    where: metasWhereUniqueInput
  }

  /**
   * metas deleteMany
   */
  export type metasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which metas to delete
     */
    where?: metasWhereInput
  }

  /**
   * metas without action
   */
  export type metasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metas
     */
    select?: metasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: metasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    criado_em: 'criado_em',
    ativo: 'ativo'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const CategoriasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    tipo: 'tipo',
    criado_em: 'criado_em',
    usuario_id: 'usuario_id'
  };

  export type CategoriasScalarFieldEnum = (typeof CategoriasScalarFieldEnum)[keyof typeof CategoriasScalarFieldEnum]


  export const ContasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    saldo_inicial: 'saldo_inicial',
    criado_em: 'criado_em',
    usuario_id: 'usuario_id'
  };

  export type ContasScalarFieldEnum = (typeof ContasScalarFieldEnum)[keyof typeof ContasScalarFieldEnum]


  export const TransacoesScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    categoria_id: 'categoria_id',
    conta_id: 'conta_id',
    valor: 'valor',
    tipo: 'tipo',
    descricao: 'descricao',
    data_transacao: 'data_transacao',
    criado_em: 'criado_em'
  };

  export type TransacoesScalarFieldEnum = (typeof TransacoesScalarFieldEnum)[keyof typeof TransacoesScalarFieldEnum]


  export const ParcelasScalarFieldEnum: {
    id: 'id',
    transacao_id: 'transacao_id',
    numero_parcela: 'numero_parcela',
    valor: 'valor',
    data_vencimento: 'data_vencimento'
  };

  export type ParcelasScalarFieldEnum = (typeof ParcelasScalarFieldEnum)[keyof typeof ParcelasScalarFieldEnum]


  export const OrcamentosScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    categoria_id: 'categoria_id',
    valor_limite: 'valor_limite',
    periodo: 'periodo',
    criado_em: 'criado_em'
  };

  export type OrcamentosScalarFieldEnum = (typeof OrcamentosScalarFieldEnum)[keyof typeof OrcamentosScalarFieldEnum]


  export const MetasScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    nome: 'nome',
    valor_meta: 'valor_meta',
    data_limite: 'data_limite',
    valor_atual: 'valor_atual',
    criado_em: 'criado_em'
  };

  export type MetasScalarFieldEnum = (typeof MetasScalarFieldEnum)[keyof typeof MetasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    id?: IntFilter<"usuarios"> | number
    nome?: StringFilter<"usuarios"> | string
    email?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    criado_em?: DateTimeFilter<"usuarios"> | Date | string
    ativo?: BoolFilter<"usuarios"> | boolean
    categorias?: CategoriasListRelationFilter
    contas?: ContasListRelationFilter
    transacoes?: TransacoesListRelationFilter
    orcamentos?: OrcamentosListRelationFilter
    metas?: MetasListRelationFilter
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    ativo?: SortOrder
    categorias?: categoriasOrderByRelationAggregateInput
    contas?: contasOrderByRelationAggregateInput
    transacoes?: transacoesOrderByRelationAggregateInput
    orcamentos?: orcamentosOrderByRelationAggregateInput
    metas?: metasOrderByRelationAggregateInput
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    nome?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    criado_em?: DateTimeFilter<"usuarios"> | Date | string
    ativo?: BoolFilter<"usuarios"> | boolean
    categorias?: CategoriasListRelationFilter
    contas?: ContasListRelationFilter
    transacoes?: TransacoesListRelationFilter
    orcamentos?: OrcamentosListRelationFilter
    metas?: MetasListRelationFilter
  }, "id" | "email">

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    ativo?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuarios"> | number
    nome?: StringWithAggregatesFilter<"usuarios"> | string
    email?: StringWithAggregatesFilter<"usuarios"> | string
    senha?: StringWithAggregatesFilter<"usuarios"> | string
    criado_em?: DateTimeWithAggregatesFilter<"usuarios"> | Date | string
    ativo?: BoolWithAggregatesFilter<"usuarios"> | boolean
  }

  export type categoriasWhereInput = {
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    id?: IntFilter<"categorias"> | number
    nome?: StringFilter<"categorias"> | string
    tipo?: StringFilter<"categorias"> | string
    criado_em?: DateTimeFilter<"categorias"> | Date | string
    usuario_id?: IntFilter<"categorias"> | number
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    transacoes?: TransacoesListRelationFilter
    orcamentos?: OrcamentosListRelationFilter
  }

  export type categoriasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
    usuario?: usuariosOrderByWithRelationInput
    transacoes?: transacoesOrderByRelationAggregateInput
    orcamentos?: orcamentosOrderByRelationAggregateInput
  }

  export type categoriasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    nome?: StringFilter<"categorias"> | string
    tipo?: StringFilter<"categorias"> | string
    criado_em?: DateTimeFilter<"categorias"> | Date | string
    usuario_id?: IntFilter<"categorias"> | number
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    transacoes?: TransacoesListRelationFilter
    orcamentos?: OrcamentosListRelationFilter
  }, "id">

  export type categoriasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
    _count?: categoriasCountOrderByAggregateInput
    _avg?: categoriasAvgOrderByAggregateInput
    _max?: categoriasMaxOrderByAggregateInput
    _min?: categoriasMinOrderByAggregateInput
    _sum?: categoriasSumOrderByAggregateInput
  }

  export type categoriasScalarWhereWithAggregatesInput = {
    AND?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    OR?: categoriasScalarWhereWithAggregatesInput[]
    NOT?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categorias"> | number
    nome?: StringWithAggregatesFilter<"categorias"> | string
    tipo?: StringWithAggregatesFilter<"categorias"> | string
    criado_em?: DateTimeWithAggregatesFilter<"categorias"> | Date | string
    usuario_id?: IntWithAggregatesFilter<"categorias"> | number
  }

  export type contasWhereInput = {
    AND?: contasWhereInput | contasWhereInput[]
    OR?: contasWhereInput[]
    NOT?: contasWhereInput | contasWhereInput[]
    id?: IntFilter<"contas"> | number
    nome?: StringFilter<"contas"> | string
    saldo_inicial?: FloatFilter<"contas"> | number
    criado_em?: DateTimeFilter<"contas"> | Date | string
    usuario_id?: IntFilter<"contas"> | number
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    transacoes?: TransacoesListRelationFilter
  }

  export type contasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    saldo_inicial?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
    usuario?: usuariosOrderByWithRelationInput
    transacoes?: transacoesOrderByRelationAggregateInput
  }

  export type contasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: contasWhereInput | contasWhereInput[]
    OR?: contasWhereInput[]
    NOT?: contasWhereInput | contasWhereInput[]
    nome?: StringFilter<"contas"> | string
    saldo_inicial?: FloatFilter<"contas"> | number
    criado_em?: DateTimeFilter<"contas"> | Date | string
    usuario_id?: IntFilter<"contas"> | number
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    transacoes?: TransacoesListRelationFilter
  }, "id">

  export type contasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    saldo_inicial?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
    _count?: contasCountOrderByAggregateInput
    _avg?: contasAvgOrderByAggregateInput
    _max?: contasMaxOrderByAggregateInput
    _min?: contasMinOrderByAggregateInput
    _sum?: contasSumOrderByAggregateInput
  }

  export type contasScalarWhereWithAggregatesInput = {
    AND?: contasScalarWhereWithAggregatesInput | contasScalarWhereWithAggregatesInput[]
    OR?: contasScalarWhereWithAggregatesInput[]
    NOT?: contasScalarWhereWithAggregatesInput | contasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"contas"> | number
    nome?: StringWithAggregatesFilter<"contas"> | string
    saldo_inicial?: FloatWithAggregatesFilter<"contas"> | number
    criado_em?: DateTimeWithAggregatesFilter<"contas"> | Date | string
    usuario_id?: IntWithAggregatesFilter<"contas"> | number
  }

  export type transacoesWhereInput = {
    AND?: transacoesWhereInput | transacoesWhereInput[]
    OR?: transacoesWhereInput[]
    NOT?: transacoesWhereInput | transacoesWhereInput[]
    id?: IntFilter<"transacoes"> | number
    usuario_id?: IntFilter<"transacoes"> | number
    categoria_id?: IntFilter<"transacoes"> | number
    conta_id?: IntFilter<"transacoes"> | number
    valor?: FloatFilter<"transacoes"> | number
    tipo?: StringFilter<"transacoes"> | string
    descricao?: StringNullableFilter<"transacoes"> | string | null
    data_transacao?: DateTimeFilter<"transacoes"> | Date | string
    criado_em?: DateTimeFilter<"transacoes"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    categoria?: XOR<CategoriasScalarRelationFilter, categoriasWhereInput>
    conta?: XOR<ContasScalarRelationFilter, contasWhereInput>
    parcelas?: ParcelasListRelationFilter
  }

  export type transacoesOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data_transacao?: SortOrder
    criado_em?: SortOrder
    usuario?: usuariosOrderByWithRelationInput
    categoria?: categoriasOrderByWithRelationInput
    conta?: contasOrderByWithRelationInput
    parcelas?: parcelasOrderByRelationAggregateInput
  }

  export type transacoesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transacoesWhereInput | transacoesWhereInput[]
    OR?: transacoesWhereInput[]
    NOT?: transacoesWhereInput | transacoesWhereInput[]
    usuario_id?: IntFilter<"transacoes"> | number
    categoria_id?: IntFilter<"transacoes"> | number
    conta_id?: IntFilter<"transacoes"> | number
    valor?: FloatFilter<"transacoes"> | number
    tipo?: StringFilter<"transacoes"> | string
    descricao?: StringNullableFilter<"transacoes"> | string | null
    data_transacao?: DateTimeFilter<"transacoes"> | Date | string
    criado_em?: DateTimeFilter<"transacoes"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    categoria?: XOR<CategoriasScalarRelationFilter, categoriasWhereInput>
    conta?: XOR<ContasScalarRelationFilter, contasWhereInput>
    parcelas?: ParcelasListRelationFilter
  }, "id">

  export type transacoesOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data_transacao?: SortOrder
    criado_em?: SortOrder
    _count?: transacoesCountOrderByAggregateInput
    _avg?: transacoesAvgOrderByAggregateInput
    _max?: transacoesMaxOrderByAggregateInput
    _min?: transacoesMinOrderByAggregateInput
    _sum?: transacoesSumOrderByAggregateInput
  }

  export type transacoesScalarWhereWithAggregatesInput = {
    AND?: transacoesScalarWhereWithAggregatesInput | transacoesScalarWhereWithAggregatesInput[]
    OR?: transacoesScalarWhereWithAggregatesInput[]
    NOT?: transacoesScalarWhereWithAggregatesInput | transacoesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transacoes"> | number
    usuario_id?: IntWithAggregatesFilter<"transacoes"> | number
    categoria_id?: IntWithAggregatesFilter<"transacoes"> | number
    conta_id?: IntWithAggregatesFilter<"transacoes"> | number
    valor?: FloatWithAggregatesFilter<"transacoes"> | number
    tipo?: StringWithAggregatesFilter<"transacoes"> | string
    descricao?: StringNullableWithAggregatesFilter<"transacoes"> | string | null
    data_transacao?: DateTimeWithAggregatesFilter<"transacoes"> | Date | string
    criado_em?: DateTimeWithAggregatesFilter<"transacoes"> | Date | string
  }

  export type parcelasWhereInput = {
    AND?: parcelasWhereInput | parcelasWhereInput[]
    OR?: parcelasWhereInput[]
    NOT?: parcelasWhereInput | parcelasWhereInput[]
    id?: IntFilter<"parcelas"> | number
    transacao_id?: IntFilter<"parcelas"> | number
    numero_parcela?: IntFilter<"parcelas"> | number
    valor?: FloatFilter<"parcelas"> | number
    data_vencimento?: DateTimeFilter<"parcelas"> | Date | string
    transacao?: XOR<TransacoesScalarRelationFilter, transacoesWhereInput>
  }

  export type parcelasOrderByWithRelationInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
    data_vencimento?: SortOrder
    transacao?: transacoesOrderByWithRelationInput
  }

  export type parcelasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: parcelasWhereInput | parcelasWhereInput[]
    OR?: parcelasWhereInput[]
    NOT?: parcelasWhereInput | parcelasWhereInput[]
    transacao_id?: IntFilter<"parcelas"> | number
    numero_parcela?: IntFilter<"parcelas"> | number
    valor?: FloatFilter<"parcelas"> | number
    data_vencimento?: DateTimeFilter<"parcelas"> | Date | string
    transacao?: XOR<TransacoesScalarRelationFilter, transacoesWhereInput>
  }, "id">

  export type parcelasOrderByWithAggregationInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
    data_vencimento?: SortOrder
    _count?: parcelasCountOrderByAggregateInput
    _avg?: parcelasAvgOrderByAggregateInput
    _max?: parcelasMaxOrderByAggregateInput
    _min?: parcelasMinOrderByAggregateInput
    _sum?: parcelasSumOrderByAggregateInput
  }

  export type parcelasScalarWhereWithAggregatesInput = {
    AND?: parcelasScalarWhereWithAggregatesInput | parcelasScalarWhereWithAggregatesInput[]
    OR?: parcelasScalarWhereWithAggregatesInput[]
    NOT?: parcelasScalarWhereWithAggregatesInput | parcelasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"parcelas"> | number
    transacao_id?: IntWithAggregatesFilter<"parcelas"> | number
    numero_parcela?: IntWithAggregatesFilter<"parcelas"> | number
    valor?: FloatWithAggregatesFilter<"parcelas"> | number
    data_vencimento?: DateTimeWithAggregatesFilter<"parcelas"> | Date | string
  }

  export type orcamentosWhereInput = {
    AND?: orcamentosWhereInput | orcamentosWhereInput[]
    OR?: orcamentosWhereInput[]
    NOT?: orcamentosWhereInput | orcamentosWhereInput[]
    id?: IntFilter<"orcamentos"> | number
    usuario_id?: IntFilter<"orcamentos"> | number
    categoria_id?: IntFilter<"orcamentos"> | number
    valor_limite?: FloatFilter<"orcamentos"> | number
    periodo?: StringFilter<"orcamentos"> | string
    criado_em?: DateTimeFilter<"orcamentos"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    categoria?: XOR<CategoriasScalarRelationFilter, categoriasWhereInput>
  }

  export type orcamentosOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
    periodo?: SortOrder
    criado_em?: SortOrder
    usuario?: usuariosOrderByWithRelationInput
    categoria?: categoriasOrderByWithRelationInput
  }

  export type orcamentosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: orcamentosWhereInput | orcamentosWhereInput[]
    OR?: orcamentosWhereInput[]
    NOT?: orcamentosWhereInput | orcamentosWhereInput[]
    usuario_id?: IntFilter<"orcamentos"> | number
    categoria_id?: IntFilter<"orcamentos"> | number
    valor_limite?: FloatFilter<"orcamentos"> | number
    periodo?: StringFilter<"orcamentos"> | string
    criado_em?: DateTimeFilter<"orcamentos"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
    categoria?: XOR<CategoriasScalarRelationFilter, categoriasWhereInput>
  }, "id">

  export type orcamentosOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
    periodo?: SortOrder
    criado_em?: SortOrder
    _count?: orcamentosCountOrderByAggregateInput
    _avg?: orcamentosAvgOrderByAggregateInput
    _max?: orcamentosMaxOrderByAggregateInput
    _min?: orcamentosMinOrderByAggregateInput
    _sum?: orcamentosSumOrderByAggregateInput
  }

  export type orcamentosScalarWhereWithAggregatesInput = {
    AND?: orcamentosScalarWhereWithAggregatesInput | orcamentosScalarWhereWithAggregatesInput[]
    OR?: orcamentosScalarWhereWithAggregatesInput[]
    NOT?: orcamentosScalarWhereWithAggregatesInput | orcamentosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orcamentos"> | number
    usuario_id?: IntWithAggregatesFilter<"orcamentos"> | number
    categoria_id?: IntWithAggregatesFilter<"orcamentos"> | number
    valor_limite?: FloatWithAggregatesFilter<"orcamentos"> | number
    periodo?: StringWithAggregatesFilter<"orcamentos"> | string
    criado_em?: DateTimeWithAggregatesFilter<"orcamentos"> | Date | string
  }

  export type metasWhereInput = {
    AND?: metasWhereInput | metasWhereInput[]
    OR?: metasWhereInput[]
    NOT?: metasWhereInput | metasWhereInput[]
    id?: IntFilter<"metas"> | number
    usuario_id?: IntFilter<"metas"> | number
    nome?: StringFilter<"metas"> | string
    valor_meta?: FloatFilter<"metas"> | number
    data_limite?: DateTimeFilter<"metas"> | Date | string
    valor_atual?: FloatFilter<"metas"> | number
    criado_em?: DateTimeFilter<"metas"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
  }

  export type metasOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nome?: SortOrder
    valor_meta?: SortOrder
    data_limite?: SortOrder
    valor_atual?: SortOrder
    criado_em?: SortOrder
    usuario?: usuariosOrderByWithRelationInput
  }

  export type metasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: metasWhereInput | metasWhereInput[]
    OR?: metasWhereInput[]
    NOT?: metasWhereInput | metasWhereInput[]
    usuario_id?: IntFilter<"metas"> | number
    nome?: StringFilter<"metas"> | string
    valor_meta?: FloatFilter<"metas"> | number
    data_limite?: DateTimeFilter<"metas"> | Date | string
    valor_atual?: FloatFilter<"metas"> | number
    criado_em?: DateTimeFilter<"metas"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, usuariosWhereInput>
  }, "id">

  export type metasOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nome?: SortOrder
    valor_meta?: SortOrder
    data_limite?: SortOrder
    valor_atual?: SortOrder
    criado_em?: SortOrder
    _count?: metasCountOrderByAggregateInput
    _avg?: metasAvgOrderByAggregateInput
    _max?: metasMaxOrderByAggregateInput
    _min?: metasMinOrderByAggregateInput
    _sum?: metasSumOrderByAggregateInput
  }

  export type metasScalarWhereWithAggregatesInput = {
    AND?: metasScalarWhereWithAggregatesInput | metasScalarWhereWithAggregatesInput[]
    OR?: metasScalarWhereWithAggregatesInput[]
    NOT?: metasScalarWhereWithAggregatesInput | metasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"metas"> | number
    usuario_id?: IntWithAggregatesFilter<"metas"> | number
    nome?: StringWithAggregatesFilter<"metas"> | string
    valor_meta?: FloatWithAggregatesFilter<"metas"> | number
    data_limite?: DateTimeWithAggregatesFilter<"metas"> | Date | string
    valor_atual?: FloatWithAggregatesFilter<"metas"> | number
    criado_em?: DateTimeWithAggregatesFilter<"metas"> | Date | string
  }

  export type usuariosCreateInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasCreateNestedManyWithoutUsuarioInput
    contas?: contasCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosCreateNestedManyWithoutUsuarioInput
    metas?: metasCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasUncheckedCreateNestedManyWithoutUsuarioInput
    contas?: contasUncheckedCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutUsuarioInput
    metas?: metasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateManyWithoutUsuarioNestedInput
    contas?: contasUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUpdateManyWithoutUsuarioNestedInput
    metas?: metasUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUncheckedUpdateManyWithoutUsuarioNestedInput
    contas?: contasUncheckedUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutUsuarioNestedInput
    metas?: metasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
  }

  export type usuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type categoriasCreateInput = {
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutCategoriasInput
    transacoes?: transacoesCreateNestedManyWithoutCategoriaInput
    orcamentos?: orcamentosCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasUncheckedCreateInput = {
    id?: number
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario_id: number
    transacoes?: transacoesUncheckedCreateNestedManyWithoutCategoriaInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutCategoriasNestedInput
    transacoes?: transacoesUpdateManyWithoutCategoriaNestedInput
    orcamentos?: orcamentosUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    transacoes?: transacoesUncheckedUpdateManyWithoutCategoriaNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriasCreateManyInput = {
    id?: number
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario_id: number
  }

  export type categoriasUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
  }

  export type contasCreateInput = {
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutContasInput
    transacoes?: transacoesCreateNestedManyWithoutContaInput
  }

  export type contasUncheckedCreateInput = {
    id?: number
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    usuario_id: number
    transacoes?: transacoesUncheckedCreateNestedManyWithoutContaInput
  }

  export type contasUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutContasNestedInput
    transacoes?: transacoesUpdateManyWithoutContaNestedInput
  }

  export type contasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    transacoes?: transacoesUncheckedUpdateManyWithoutContaNestedInput
  }

  export type contasCreateManyInput = {
    id?: number
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    usuario_id: number
  }

  export type contasUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
  }

  export type transacoesCreateInput = {
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutTransacoesInput
    categoria: categoriasCreateNestedOneWithoutTransacoesInput
    conta: contasCreateNestedOneWithoutTransacoesInput
    parcelas?: parcelasCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesUncheckedCreateInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    parcelas?: parcelasUncheckedCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutTransacoesNestedInput
    categoria?: categoriasUpdateOneRequiredWithoutTransacoesNestedInput
    conta?: contasUpdateOneRequiredWithoutTransacoesNestedInput
    parcelas?: parcelasUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: parcelasUncheckedUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesCreateManyInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
  }

  export type transacoesUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transacoesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type parcelasCreateInput = {
    numero_parcela: number
    valor: number
    data_vencimento: Date | string
    transacao: transacoesCreateNestedOneWithoutParcelasInput
  }

  export type parcelasUncheckedCreateInput = {
    id?: number
    transacao_id: number
    numero_parcela: number
    valor: number
    data_vencimento: Date | string
  }

  export type parcelasUpdateInput = {
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    transacao?: transacoesUpdateOneRequiredWithoutParcelasNestedInput
  }

  export type parcelasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transacao_id?: IntFieldUpdateOperationsInput | number
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type parcelasCreateManyInput = {
    id?: number
    transacao_id: number
    numero_parcela: number
    valor: number
    data_vencimento: Date | string
  }

  export type parcelasUpdateManyMutationInput = {
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type parcelasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transacao_id?: IntFieldUpdateOperationsInput | number
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosCreateInput = {
    valor_limite: number
    periodo: string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutOrcamentosInput
    categoria: categoriasCreateNestedOneWithoutOrcamentosInput
  }

  export type orcamentosUncheckedCreateInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    valor_limite: number
    periodo: string
    criado_em?: Date | string
  }

  export type orcamentosUpdateInput = {
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutOrcamentosNestedInput
    categoria?: categoriasUpdateOneRequiredWithoutOrcamentosNestedInput
  }

  export type orcamentosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosCreateManyInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    valor_limite: number
    periodo: string
    criado_em?: Date | string
  }

  export type orcamentosUpdateManyMutationInput = {
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type metasCreateInput = {
    nome: string
    valor_meta: number
    data_limite: Date | string
    valor_atual?: number
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutMetasInput
  }

  export type metasUncheckedCreateInput = {
    id?: number
    usuario_id: number
    nome: string
    valor_meta: number
    data_limite: Date | string
    valor_atual?: number
    criado_em?: Date | string
  }

  export type metasUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutMetasNestedInput
  }

  export type metasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type metasCreateManyInput = {
    id?: number
    usuario_id: number
    nome: string
    valor_meta: number
    data_limite: Date | string
    valor_atual?: number
    criado_em?: Date | string
  }

  export type metasUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type metasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CategoriasListRelationFilter = {
    every?: categoriasWhereInput
    some?: categoriasWhereInput
    none?: categoriasWhereInput
  }

  export type ContasListRelationFilter = {
    every?: contasWhereInput
    some?: contasWhereInput
    none?: contasWhereInput
  }

  export type TransacoesListRelationFilter = {
    every?: transacoesWhereInput
    some?: transacoesWhereInput
    none?: transacoesWhereInput
  }

  export type OrcamentosListRelationFilter = {
    every?: orcamentosWhereInput
    some?: orcamentosWhereInput
    none?: orcamentosWhereInput
  }

  export type MetasListRelationFilter = {
    every?: metasWhereInput
    some?: metasWhereInput
    none?: metasWhereInput
  }

  export type categoriasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transacoesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orcamentosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type metasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    ativo?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    ativo?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    ativo?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UsuariosScalarRelationFilter = {
    is?: usuariosWhereInput
    isNot?: usuariosWhereInput
  }

  export type categoriasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
  }

  export type categoriasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type categoriasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
  }

  export type categoriasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
  }

  export type categoriasSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type contasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    saldo_inicial?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
  }

  export type contasAvgOrderByAggregateInput = {
    id?: SortOrder
    saldo_inicial?: SortOrder
    usuario_id?: SortOrder
  }

  export type contasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    saldo_inicial?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
  }

  export type contasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    saldo_inicial?: SortOrder
    criado_em?: SortOrder
    usuario_id?: SortOrder
  }

  export type contasSumOrderByAggregateInput = {
    id?: SortOrder
    saldo_inicial?: SortOrder
    usuario_id?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CategoriasScalarRelationFilter = {
    is?: categoriasWhereInput
    isNot?: categoriasWhereInput
  }

  export type ContasScalarRelationFilter = {
    is?: contasWhereInput
    isNot?: contasWhereInput
  }

  export type ParcelasListRelationFilter = {
    every?: parcelasWhereInput
    some?: parcelasWhereInput
    none?: parcelasWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type parcelasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transacoesCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrder
    data_transacao?: SortOrder
    criado_em?: SortOrder
  }

  export type transacoesAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
  }

  export type transacoesMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrder
    data_transacao?: SortOrder
    criado_em?: SortOrder
  }

  export type transacoesMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrder
    data_transacao?: SortOrder
    criado_em?: SortOrder
  }

  export type transacoesSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    conta_id?: SortOrder
    valor?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TransacoesScalarRelationFilter = {
    is?: transacoesWhereInput
    isNot?: transacoesWhereInput
  }

  export type parcelasCountOrderByAggregateInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
    data_vencimento?: SortOrder
  }

  export type parcelasAvgOrderByAggregateInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
  }

  export type parcelasMaxOrderByAggregateInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
    data_vencimento?: SortOrder
  }

  export type parcelasMinOrderByAggregateInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
    data_vencimento?: SortOrder
  }

  export type parcelasSumOrderByAggregateInput = {
    id?: SortOrder
    transacao_id?: SortOrder
    numero_parcela?: SortOrder
    valor?: SortOrder
  }

  export type orcamentosCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
    periodo?: SortOrder
    criado_em?: SortOrder
  }

  export type orcamentosAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
  }

  export type orcamentosMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
    periodo?: SortOrder
    criado_em?: SortOrder
  }

  export type orcamentosMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
    periodo?: SortOrder
    criado_em?: SortOrder
  }

  export type orcamentosSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    categoria_id?: SortOrder
    valor_limite?: SortOrder
  }

  export type metasCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nome?: SortOrder
    valor_meta?: SortOrder
    data_limite?: SortOrder
    valor_atual?: SortOrder
    criado_em?: SortOrder
  }

  export type metasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    valor_meta?: SortOrder
    valor_atual?: SortOrder
  }

  export type metasMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nome?: SortOrder
    valor_meta?: SortOrder
    data_limite?: SortOrder
    valor_atual?: SortOrder
    criado_em?: SortOrder
  }

  export type metasMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nome?: SortOrder
    valor_meta?: SortOrder
    data_limite?: SortOrder
    valor_atual?: SortOrder
    criado_em?: SortOrder
  }

  export type metasSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    valor_meta?: SortOrder
    valor_atual?: SortOrder
  }

  export type categoriasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<categoriasCreateWithoutUsuarioInput, categoriasUncheckedCreateWithoutUsuarioInput> | categoriasCreateWithoutUsuarioInput[] | categoriasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUsuarioInput | categoriasCreateOrConnectWithoutUsuarioInput[]
    createMany?: categoriasCreateManyUsuarioInputEnvelope
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
  }

  export type contasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<contasCreateWithoutUsuarioInput, contasUncheckedCreateWithoutUsuarioInput> | contasCreateWithoutUsuarioInput[] | contasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: contasCreateOrConnectWithoutUsuarioInput | contasCreateOrConnectWithoutUsuarioInput[]
    createMany?: contasCreateManyUsuarioInputEnvelope
    connect?: contasWhereUniqueInput | contasWhereUniqueInput[]
  }

  export type transacoesCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<transacoesCreateWithoutUsuarioInput, transacoesUncheckedCreateWithoutUsuarioInput> | transacoesCreateWithoutUsuarioInput[] | transacoesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutUsuarioInput | transacoesCreateOrConnectWithoutUsuarioInput[]
    createMany?: transacoesCreateManyUsuarioInputEnvelope
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
  }

  export type orcamentosCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<orcamentosCreateWithoutUsuarioInput, orcamentosUncheckedCreateWithoutUsuarioInput> | orcamentosCreateWithoutUsuarioInput[] | orcamentosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutUsuarioInput | orcamentosCreateOrConnectWithoutUsuarioInput[]
    createMany?: orcamentosCreateManyUsuarioInputEnvelope
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
  }

  export type metasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<metasCreateWithoutUsuarioInput, metasUncheckedCreateWithoutUsuarioInput> | metasCreateWithoutUsuarioInput[] | metasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: metasCreateOrConnectWithoutUsuarioInput | metasCreateOrConnectWithoutUsuarioInput[]
    createMany?: metasCreateManyUsuarioInputEnvelope
    connect?: metasWhereUniqueInput | metasWhereUniqueInput[]
  }

  export type categoriasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<categoriasCreateWithoutUsuarioInput, categoriasUncheckedCreateWithoutUsuarioInput> | categoriasCreateWithoutUsuarioInput[] | categoriasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUsuarioInput | categoriasCreateOrConnectWithoutUsuarioInput[]
    createMany?: categoriasCreateManyUsuarioInputEnvelope
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
  }

  export type contasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<contasCreateWithoutUsuarioInput, contasUncheckedCreateWithoutUsuarioInput> | contasCreateWithoutUsuarioInput[] | contasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: contasCreateOrConnectWithoutUsuarioInput | contasCreateOrConnectWithoutUsuarioInput[]
    createMany?: contasCreateManyUsuarioInputEnvelope
    connect?: contasWhereUniqueInput | contasWhereUniqueInput[]
  }

  export type transacoesUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<transacoesCreateWithoutUsuarioInput, transacoesUncheckedCreateWithoutUsuarioInput> | transacoesCreateWithoutUsuarioInput[] | transacoesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutUsuarioInput | transacoesCreateOrConnectWithoutUsuarioInput[]
    createMany?: transacoesCreateManyUsuarioInputEnvelope
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
  }

  export type orcamentosUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<orcamentosCreateWithoutUsuarioInput, orcamentosUncheckedCreateWithoutUsuarioInput> | orcamentosCreateWithoutUsuarioInput[] | orcamentosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutUsuarioInput | orcamentosCreateOrConnectWithoutUsuarioInput[]
    createMany?: orcamentosCreateManyUsuarioInputEnvelope
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
  }

  export type metasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<metasCreateWithoutUsuarioInput, metasUncheckedCreateWithoutUsuarioInput> | metasCreateWithoutUsuarioInput[] | metasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: metasCreateOrConnectWithoutUsuarioInput | metasCreateOrConnectWithoutUsuarioInput[]
    createMany?: metasCreateManyUsuarioInputEnvelope
    connect?: metasWhereUniqueInput | metasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type categoriasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<categoriasCreateWithoutUsuarioInput, categoriasUncheckedCreateWithoutUsuarioInput> | categoriasCreateWithoutUsuarioInput[] | categoriasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUsuarioInput | categoriasCreateOrConnectWithoutUsuarioInput[]
    upsert?: categoriasUpsertWithWhereUniqueWithoutUsuarioInput | categoriasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: categoriasCreateManyUsuarioInputEnvelope
    set?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    disconnect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    delete?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    update?: categoriasUpdateWithWhereUniqueWithoutUsuarioInput | categoriasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: categoriasUpdateManyWithWhereWithoutUsuarioInput | categoriasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
  }

  export type contasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<contasCreateWithoutUsuarioInput, contasUncheckedCreateWithoutUsuarioInput> | contasCreateWithoutUsuarioInput[] | contasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: contasCreateOrConnectWithoutUsuarioInput | contasCreateOrConnectWithoutUsuarioInput[]
    upsert?: contasUpsertWithWhereUniqueWithoutUsuarioInput | contasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: contasCreateManyUsuarioInputEnvelope
    set?: contasWhereUniqueInput | contasWhereUniqueInput[]
    disconnect?: contasWhereUniqueInput | contasWhereUniqueInput[]
    delete?: contasWhereUniqueInput | contasWhereUniqueInput[]
    connect?: contasWhereUniqueInput | contasWhereUniqueInput[]
    update?: contasUpdateWithWhereUniqueWithoutUsuarioInput | contasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: contasUpdateManyWithWhereWithoutUsuarioInput | contasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: contasScalarWhereInput | contasScalarWhereInput[]
  }

  export type transacoesUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<transacoesCreateWithoutUsuarioInput, transacoesUncheckedCreateWithoutUsuarioInput> | transacoesCreateWithoutUsuarioInput[] | transacoesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutUsuarioInput | transacoesCreateOrConnectWithoutUsuarioInput[]
    upsert?: transacoesUpsertWithWhereUniqueWithoutUsuarioInput | transacoesUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: transacoesCreateManyUsuarioInputEnvelope
    set?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    disconnect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    delete?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    update?: transacoesUpdateWithWhereUniqueWithoutUsuarioInput | transacoesUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: transacoesUpdateManyWithWhereWithoutUsuarioInput | transacoesUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
  }

  export type orcamentosUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<orcamentosCreateWithoutUsuarioInput, orcamentosUncheckedCreateWithoutUsuarioInput> | orcamentosCreateWithoutUsuarioInput[] | orcamentosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutUsuarioInput | orcamentosCreateOrConnectWithoutUsuarioInput[]
    upsert?: orcamentosUpsertWithWhereUniqueWithoutUsuarioInput | orcamentosUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: orcamentosCreateManyUsuarioInputEnvelope
    set?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    disconnect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    delete?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    update?: orcamentosUpdateWithWhereUniqueWithoutUsuarioInput | orcamentosUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: orcamentosUpdateManyWithWhereWithoutUsuarioInput | orcamentosUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: orcamentosScalarWhereInput | orcamentosScalarWhereInput[]
  }

  export type metasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<metasCreateWithoutUsuarioInput, metasUncheckedCreateWithoutUsuarioInput> | metasCreateWithoutUsuarioInput[] | metasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: metasCreateOrConnectWithoutUsuarioInput | metasCreateOrConnectWithoutUsuarioInput[]
    upsert?: metasUpsertWithWhereUniqueWithoutUsuarioInput | metasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: metasCreateManyUsuarioInputEnvelope
    set?: metasWhereUniqueInput | metasWhereUniqueInput[]
    disconnect?: metasWhereUniqueInput | metasWhereUniqueInput[]
    delete?: metasWhereUniqueInput | metasWhereUniqueInput[]
    connect?: metasWhereUniqueInput | metasWhereUniqueInput[]
    update?: metasUpdateWithWhereUniqueWithoutUsuarioInput | metasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: metasUpdateManyWithWhereWithoutUsuarioInput | metasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: metasScalarWhereInput | metasScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type categoriasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<categoriasCreateWithoutUsuarioInput, categoriasUncheckedCreateWithoutUsuarioInput> | categoriasCreateWithoutUsuarioInput[] | categoriasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUsuarioInput | categoriasCreateOrConnectWithoutUsuarioInput[]
    upsert?: categoriasUpsertWithWhereUniqueWithoutUsuarioInput | categoriasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: categoriasCreateManyUsuarioInputEnvelope
    set?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    disconnect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    delete?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    update?: categoriasUpdateWithWhereUniqueWithoutUsuarioInput | categoriasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: categoriasUpdateManyWithWhereWithoutUsuarioInput | categoriasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
  }

  export type contasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<contasCreateWithoutUsuarioInput, contasUncheckedCreateWithoutUsuarioInput> | contasCreateWithoutUsuarioInput[] | contasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: contasCreateOrConnectWithoutUsuarioInput | contasCreateOrConnectWithoutUsuarioInput[]
    upsert?: contasUpsertWithWhereUniqueWithoutUsuarioInput | contasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: contasCreateManyUsuarioInputEnvelope
    set?: contasWhereUniqueInput | contasWhereUniqueInput[]
    disconnect?: contasWhereUniqueInput | contasWhereUniqueInput[]
    delete?: contasWhereUniqueInput | contasWhereUniqueInput[]
    connect?: contasWhereUniqueInput | contasWhereUniqueInput[]
    update?: contasUpdateWithWhereUniqueWithoutUsuarioInput | contasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: contasUpdateManyWithWhereWithoutUsuarioInput | contasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: contasScalarWhereInput | contasScalarWhereInput[]
  }

  export type transacoesUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<transacoesCreateWithoutUsuarioInput, transacoesUncheckedCreateWithoutUsuarioInput> | transacoesCreateWithoutUsuarioInput[] | transacoesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutUsuarioInput | transacoesCreateOrConnectWithoutUsuarioInput[]
    upsert?: transacoesUpsertWithWhereUniqueWithoutUsuarioInput | transacoesUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: transacoesCreateManyUsuarioInputEnvelope
    set?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    disconnect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    delete?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    update?: transacoesUpdateWithWhereUniqueWithoutUsuarioInput | transacoesUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: transacoesUpdateManyWithWhereWithoutUsuarioInput | transacoesUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
  }

  export type orcamentosUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<orcamentosCreateWithoutUsuarioInput, orcamentosUncheckedCreateWithoutUsuarioInput> | orcamentosCreateWithoutUsuarioInput[] | orcamentosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutUsuarioInput | orcamentosCreateOrConnectWithoutUsuarioInput[]
    upsert?: orcamentosUpsertWithWhereUniqueWithoutUsuarioInput | orcamentosUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: orcamentosCreateManyUsuarioInputEnvelope
    set?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    disconnect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    delete?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    update?: orcamentosUpdateWithWhereUniqueWithoutUsuarioInput | orcamentosUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: orcamentosUpdateManyWithWhereWithoutUsuarioInput | orcamentosUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: orcamentosScalarWhereInput | orcamentosScalarWhereInput[]
  }

  export type metasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<metasCreateWithoutUsuarioInput, metasUncheckedCreateWithoutUsuarioInput> | metasCreateWithoutUsuarioInput[] | metasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: metasCreateOrConnectWithoutUsuarioInput | metasCreateOrConnectWithoutUsuarioInput[]
    upsert?: metasUpsertWithWhereUniqueWithoutUsuarioInput | metasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: metasCreateManyUsuarioInputEnvelope
    set?: metasWhereUniqueInput | metasWhereUniqueInput[]
    disconnect?: metasWhereUniqueInput | metasWhereUniqueInput[]
    delete?: metasWhereUniqueInput | metasWhereUniqueInput[]
    connect?: metasWhereUniqueInput | metasWhereUniqueInput[]
    update?: metasUpdateWithWhereUniqueWithoutUsuarioInput | metasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: metasUpdateManyWithWhereWithoutUsuarioInput | metasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: metasScalarWhereInput | metasScalarWhereInput[]
  }

  export type usuariosCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<usuariosCreateWithoutCategoriasInput, usuariosUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutCategoriasInput
    connect?: usuariosWhereUniqueInput
  }

  export type transacoesCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<transacoesCreateWithoutCategoriaInput, transacoesUncheckedCreateWithoutCategoriaInput> | transacoesCreateWithoutCategoriaInput[] | transacoesUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutCategoriaInput | transacoesCreateOrConnectWithoutCategoriaInput[]
    createMany?: transacoesCreateManyCategoriaInputEnvelope
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
  }

  export type orcamentosCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<orcamentosCreateWithoutCategoriaInput, orcamentosUncheckedCreateWithoutCategoriaInput> | orcamentosCreateWithoutCategoriaInput[] | orcamentosUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutCategoriaInput | orcamentosCreateOrConnectWithoutCategoriaInput[]
    createMany?: orcamentosCreateManyCategoriaInputEnvelope
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
  }

  export type transacoesUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<transacoesCreateWithoutCategoriaInput, transacoesUncheckedCreateWithoutCategoriaInput> | transacoesCreateWithoutCategoriaInput[] | transacoesUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutCategoriaInput | transacoesCreateOrConnectWithoutCategoriaInput[]
    createMany?: transacoesCreateManyCategoriaInputEnvelope
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
  }

  export type orcamentosUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<orcamentosCreateWithoutCategoriaInput, orcamentosUncheckedCreateWithoutCategoriaInput> | orcamentosCreateWithoutCategoriaInput[] | orcamentosUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutCategoriaInput | orcamentosCreateOrConnectWithoutCategoriaInput[]
    createMany?: orcamentosCreateManyCategoriaInputEnvelope
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
  }

  export type usuariosUpdateOneRequiredWithoutCategoriasNestedInput = {
    create?: XOR<usuariosCreateWithoutCategoriasInput, usuariosUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutCategoriasInput
    upsert?: usuariosUpsertWithoutCategoriasInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutCategoriasInput, usuariosUpdateWithoutCategoriasInput>, usuariosUncheckedUpdateWithoutCategoriasInput>
  }

  export type transacoesUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<transacoesCreateWithoutCategoriaInput, transacoesUncheckedCreateWithoutCategoriaInput> | transacoesCreateWithoutCategoriaInput[] | transacoesUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutCategoriaInput | transacoesCreateOrConnectWithoutCategoriaInput[]
    upsert?: transacoesUpsertWithWhereUniqueWithoutCategoriaInput | transacoesUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: transacoesCreateManyCategoriaInputEnvelope
    set?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    disconnect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    delete?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    update?: transacoesUpdateWithWhereUniqueWithoutCategoriaInput | transacoesUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: transacoesUpdateManyWithWhereWithoutCategoriaInput | transacoesUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
  }

  export type orcamentosUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<orcamentosCreateWithoutCategoriaInput, orcamentosUncheckedCreateWithoutCategoriaInput> | orcamentosCreateWithoutCategoriaInput[] | orcamentosUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutCategoriaInput | orcamentosCreateOrConnectWithoutCategoriaInput[]
    upsert?: orcamentosUpsertWithWhereUniqueWithoutCategoriaInput | orcamentosUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: orcamentosCreateManyCategoriaInputEnvelope
    set?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    disconnect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    delete?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    update?: orcamentosUpdateWithWhereUniqueWithoutCategoriaInput | orcamentosUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: orcamentosUpdateManyWithWhereWithoutCategoriaInput | orcamentosUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: orcamentosScalarWhereInput | orcamentosScalarWhereInput[]
  }

  export type transacoesUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<transacoesCreateWithoutCategoriaInput, transacoesUncheckedCreateWithoutCategoriaInput> | transacoesCreateWithoutCategoriaInput[] | transacoesUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutCategoriaInput | transacoesCreateOrConnectWithoutCategoriaInput[]
    upsert?: transacoesUpsertWithWhereUniqueWithoutCategoriaInput | transacoesUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: transacoesCreateManyCategoriaInputEnvelope
    set?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    disconnect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    delete?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    update?: transacoesUpdateWithWhereUniqueWithoutCategoriaInput | transacoesUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: transacoesUpdateManyWithWhereWithoutCategoriaInput | transacoesUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
  }

  export type orcamentosUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<orcamentosCreateWithoutCategoriaInput, orcamentosUncheckedCreateWithoutCategoriaInput> | orcamentosCreateWithoutCategoriaInput[] | orcamentosUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: orcamentosCreateOrConnectWithoutCategoriaInput | orcamentosCreateOrConnectWithoutCategoriaInput[]
    upsert?: orcamentosUpsertWithWhereUniqueWithoutCategoriaInput | orcamentosUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: orcamentosCreateManyCategoriaInputEnvelope
    set?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    disconnect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    delete?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    connect?: orcamentosWhereUniqueInput | orcamentosWhereUniqueInput[]
    update?: orcamentosUpdateWithWhereUniqueWithoutCategoriaInput | orcamentosUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: orcamentosUpdateManyWithWhereWithoutCategoriaInput | orcamentosUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: orcamentosScalarWhereInput | orcamentosScalarWhereInput[]
  }

  export type usuariosCreateNestedOneWithoutContasInput = {
    create?: XOR<usuariosCreateWithoutContasInput, usuariosUncheckedCreateWithoutContasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutContasInput
    connect?: usuariosWhereUniqueInput
  }

  export type transacoesCreateNestedManyWithoutContaInput = {
    create?: XOR<transacoesCreateWithoutContaInput, transacoesUncheckedCreateWithoutContaInput> | transacoesCreateWithoutContaInput[] | transacoesUncheckedCreateWithoutContaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutContaInput | transacoesCreateOrConnectWithoutContaInput[]
    createMany?: transacoesCreateManyContaInputEnvelope
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
  }

  export type transacoesUncheckedCreateNestedManyWithoutContaInput = {
    create?: XOR<transacoesCreateWithoutContaInput, transacoesUncheckedCreateWithoutContaInput> | transacoesCreateWithoutContaInput[] | transacoesUncheckedCreateWithoutContaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutContaInput | transacoesCreateOrConnectWithoutContaInput[]
    createMany?: transacoesCreateManyContaInputEnvelope
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usuariosUpdateOneRequiredWithoutContasNestedInput = {
    create?: XOR<usuariosCreateWithoutContasInput, usuariosUncheckedCreateWithoutContasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutContasInput
    upsert?: usuariosUpsertWithoutContasInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutContasInput, usuariosUpdateWithoutContasInput>, usuariosUncheckedUpdateWithoutContasInput>
  }

  export type transacoesUpdateManyWithoutContaNestedInput = {
    create?: XOR<transacoesCreateWithoutContaInput, transacoesUncheckedCreateWithoutContaInput> | transacoesCreateWithoutContaInput[] | transacoesUncheckedCreateWithoutContaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutContaInput | transacoesCreateOrConnectWithoutContaInput[]
    upsert?: transacoesUpsertWithWhereUniqueWithoutContaInput | transacoesUpsertWithWhereUniqueWithoutContaInput[]
    createMany?: transacoesCreateManyContaInputEnvelope
    set?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    disconnect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    delete?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    update?: transacoesUpdateWithWhereUniqueWithoutContaInput | transacoesUpdateWithWhereUniqueWithoutContaInput[]
    updateMany?: transacoesUpdateManyWithWhereWithoutContaInput | transacoesUpdateManyWithWhereWithoutContaInput[]
    deleteMany?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
  }

  export type transacoesUncheckedUpdateManyWithoutContaNestedInput = {
    create?: XOR<transacoesCreateWithoutContaInput, transacoesUncheckedCreateWithoutContaInput> | transacoesCreateWithoutContaInput[] | transacoesUncheckedCreateWithoutContaInput[]
    connectOrCreate?: transacoesCreateOrConnectWithoutContaInput | transacoesCreateOrConnectWithoutContaInput[]
    upsert?: transacoesUpsertWithWhereUniqueWithoutContaInput | transacoesUpsertWithWhereUniqueWithoutContaInput[]
    createMany?: transacoesCreateManyContaInputEnvelope
    set?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    disconnect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    delete?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    connect?: transacoesWhereUniqueInput | transacoesWhereUniqueInput[]
    update?: transacoesUpdateWithWhereUniqueWithoutContaInput | transacoesUpdateWithWhereUniqueWithoutContaInput[]
    updateMany?: transacoesUpdateManyWithWhereWithoutContaInput | transacoesUpdateManyWithWhereWithoutContaInput[]
    deleteMany?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
  }

  export type usuariosCreateNestedOneWithoutTransacoesInput = {
    create?: XOR<usuariosCreateWithoutTransacoesInput, usuariosUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutTransacoesInput
    connect?: usuariosWhereUniqueInput
  }

  export type categoriasCreateNestedOneWithoutTransacoesInput = {
    create?: XOR<categoriasCreateWithoutTransacoesInput, categoriasUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutTransacoesInput
    connect?: categoriasWhereUniqueInput
  }

  export type contasCreateNestedOneWithoutTransacoesInput = {
    create?: XOR<contasCreateWithoutTransacoesInput, contasUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: contasCreateOrConnectWithoutTransacoesInput
    connect?: contasWhereUniqueInput
  }

  export type parcelasCreateNestedManyWithoutTransacaoInput = {
    create?: XOR<parcelasCreateWithoutTransacaoInput, parcelasUncheckedCreateWithoutTransacaoInput> | parcelasCreateWithoutTransacaoInput[] | parcelasUncheckedCreateWithoutTransacaoInput[]
    connectOrCreate?: parcelasCreateOrConnectWithoutTransacaoInput | parcelasCreateOrConnectWithoutTransacaoInput[]
    createMany?: parcelasCreateManyTransacaoInputEnvelope
    connect?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
  }

  export type parcelasUncheckedCreateNestedManyWithoutTransacaoInput = {
    create?: XOR<parcelasCreateWithoutTransacaoInput, parcelasUncheckedCreateWithoutTransacaoInput> | parcelasCreateWithoutTransacaoInput[] | parcelasUncheckedCreateWithoutTransacaoInput[]
    connectOrCreate?: parcelasCreateOrConnectWithoutTransacaoInput | parcelasCreateOrConnectWithoutTransacaoInput[]
    createMany?: parcelasCreateManyTransacaoInputEnvelope
    connect?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type usuariosUpdateOneRequiredWithoutTransacoesNestedInput = {
    create?: XOR<usuariosCreateWithoutTransacoesInput, usuariosUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutTransacoesInput
    upsert?: usuariosUpsertWithoutTransacoesInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutTransacoesInput, usuariosUpdateWithoutTransacoesInput>, usuariosUncheckedUpdateWithoutTransacoesInput>
  }

  export type categoriasUpdateOneRequiredWithoutTransacoesNestedInput = {
    create?: XOR<categoriasCreateWithoutTransacoesInput, categoriasUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutTransacoesInput
    upsert?: categoriasUpsertWithoutTransacoesInput
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutTransacoesInput, categoriasUpdateWithoutTransacoesInput>, categoriasUncheckedUpdateWithoutTransacoesInput>
  }

  export type contasUpdateOneRequiredWithoutTransacoesNestedInput = {
    create?: XOR<contasCreateWithoutTransacoesInput, contasUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: contasCreateOrConnectWithoutTransacoesInput
    upsert?: contasUpsertWithoutTransacoesInput
    connect?: contasWhereUniqueInput
    update?: XOR<XOR<contasUpdateToOneWithWhereWithoutTransacoesInput, contasUpdateWithoutTransacoesInput>, contasUncheckedUpdateWithoutTransacoesInput>
  }

  export type parcelasUpdateManyWithoutTransacaoNestedInput = {
    create?: XOR<parcelasCreateWithoutTransacaoInput, parcelasUncheckedCreateWithoutTransacaoInput> | parcelasCreateWithoutTransacaoInput[] | parcelasUncheckedCreateWithoutTransacaoInput[]
    connectOrCreate?: parcelasCreateOrConnectWithoutTransacaoInput | parcelasCreateOrConnectWithoutTransacaoInput[]
    upsert?: parcelasUpsertWithWhereUniqueWithoutTransacaoInput | parcelasUpsertWithWhereUniqueWithoutTransacaoInput[]
    createMany?: parcelasCreateManyTransacaoInputEnvelope
    set?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    disconnect?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    delete?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    connect?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    update?: parcelasUpdateWithWhereUniqueWithoutTransacaoInput | parcelasUpdateWithWhereUniqueWithoutTransacaoInput[]
    updateMany?: parcelasUpdateManyWithWhereWithoutTransacaoInput | parcelasUpdateManyWithWhereWithoutTransacaoInput[]
    deleteMany?: parcelasScalarWhereInput | parcelasScalarWhereInput[]
  }

  export type parcelasUncheckedUpdateManyWithoutTransacaoNestedInput = {
    create?: XOR<parcelasCreateWithoutTransacaoInput, parcelasUncheckedCreateWithoutTransacaoInput> | parcelasCreateWithoutTransacaoInput[] | parcelasUncheckedCreateWithoutTransacaoInput[]
    connectOrCreate?: parcelasCreateOrConnectWithoutTransacaoInput | parcelasCreateOrConnectWithoutTransacaoInput[]
    upsert?: parcelasUpsertWithWhereUniqueWithoutTransacaoInput | parcelasUpsertWithWhereUniqueWithoutTransacaoInput[]
    createMany?: parcelasCreateManyTransacaoInputEnvelope
    set?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    disconnect?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    delete?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    connect?: parcelasWhereUniqueInput | parcelasWhereUniqueInput[]
    update?: parcelasUpdateWithWhereUniqueWithoutTransacaoInput | parcelasUpdateWithWhereUniqueWithoutTransacaoInput[]
    updateMany?: parcelasUpdateManyWithWhereWithoutTransacaoInput | parcelasUpdateManyWithWhereWithoutTransacaoInput[]
    deleteMany?: parcelasScalarWhereInput | parcelasScalarWhereInput[]
  }

  export type transacoesCreateNestedOneWithoutParcelasInput = {
    create?: XOR<transacoesCreateWithoutParcelasInput, transacoesUncheckedCreateWithoutParcelasInput>
    connectOrCreate?: transacoesCreateOrConnectWithoutParcelasInput
    connect?: transacoesWhereUniqueInput
  }

  export type transacoesUpdateOneRequiredWithoutParcelasNestedInput = {
    create?: XOR<transacoesCreateWithoutParcelasInput, transacoesUncheckedCreateWithoutParcelasInput>
    connectOrCreate?: transacoesCreateOrConnectWithoutParcelasInput
    upsert?: transacoesUpsertWithoutParcelasInput
    connect?: transacoesWhereUniqueInput
    update?: XOR<XOR<transacoesUpdateToOneWithWhereWithoutParcelasInput, transacoesUpdateWithoutParcelasInput>, transacoesUncheckedUpdateWithoutParcelasInput>
  }

  export type usuariosCreateNestedOneWithoutOrcamentosInput = {
    create?: XOR<usuariosCreateWithoutOrcamentosInput, usuariosUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutOrcamentosInput
    connect?: usuariosWhereUniqueInput
  }

  export type categoriasCreateNestedOneWithoutOrcamentosInput = {
    create?: XOR<categoriasCreateWithoutOrcamentosInput, categoriasUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutOrcamentosInput
    connect?: categoriasWhereUniqueInput
  }

  export type usuariosUpdateOneRequiredWithoutOrcamentosNestedInput = {
    create?: XOR<usuariosCreateWithoutOrcamentosInput, usuariosUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutOrcamentosInput
    upsert?: usuariosUpsertWithoutOrcamentosInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutOrcamentosInput, usuariosUpdateWithoutOrcamentosInput>, usuariosUncheckedUpdateWithoutOrcamentosInput>
  }

  export type categoriasUpdateOneRequiredWithoutOrcamentosNestedInput = {
    create?: XOR<categoriasCreateWithoutOrcamentosInput, categoriasUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutOrcamentosInput
    upsert?: categoriasUpsertWithoutOrcamentosInput
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutOrcamentosInput, categoriasUpdateWithoutOrcamentosInput>, categoriasUncheckedUpdateWithoutOrcamentosInput>
  }

  export type usuariosCreateNestedOneWithoutMetasInput = {
    create?: XOR<usuariosCreateWithoutMetasInput, usuariosUncheckedCreateWithoutMetasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutMetasInput
    connect?: usuariosWhereUniqueInput
  }

  export type usuariosUpdateOneRequiredWithoutMetasNestedInput = {
    create?: XOR<usuariosCreateWithoutMetasInput, usuariosUncheckedCreateWithoutMetasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutMetasInput
    upsert?: usuariosUpsertWithoutMetasInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutMetasInput, usuariosUpdateWithoutMetasInput>, usuariosUncheckedUpdateWithoutMetasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type categoriasCreateWithoutUsuarioInput = {
    nome: string
    tipo: string
    criado_em?: Date | string
    transacoes?: transacoesCreateNestedManyWithoutCategoriaInput
    orcamentos?: orcamentosCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    tipo: string
    criado_em?: Date | string
    transacoes?: transacoesUncheckedCreateNestedManyWithoutCategoriaInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasCreateOrConnectWithoutUsuarioInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutUsuarioInput, categoriasUncheckedCreateWithoutUsuarioInput>
  }

  export type categoriasCreateManyUsuarioInputEnvelope = {
    data: categoriasCreateManyUsuarioInput | categoriasCreateManyUsuarioInput[]
  }

  export type contasCreateWithoutUsuarioInput = {
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    transacoes?: transacoesCreateNestedManyWithoutContaInput
  }

  export type contasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    transacoes?: transacoesUncheckedCreateNestedManyWithoutContaInput
  }

  export type contasCreateOrConnectWithoutUsuarioInput = {
    where: contasWhereUniqueInput
    create: XOR<contasCreateWithoutUsuarioInput, contasUncheckedCreateWithoutUsuarioInput>
  }

  export type contasCreateManyUsuarioInputEnvelope = {
    data: contasCreateManyUsuarioInput | contasCreateManyUsuarioInput[]
  }

  export type transacoesCreateWithoutUsuarioInput = {
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    categoria: categoriasCreateNestedOneWithoutTransacoesInput
    conta: contasCreateNestedOneWithoutTransacoesInput
    parcelas?: parcelasCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesUncheckedCreateWithoutUsuarioInput = {
    id?: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    parcelas?: parcelasUncheckedCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesCreateOrConnectWithoutUsuarioInput = {
    where: transacoesWhereUniqueInput
    create: XOR<transacoesCreateWithoutUsuarioInput, transacoesUncheckedCreateWithoutUsuarioInput>
  }

  export type transacoesCreateManyUsuarioInputEnvelope = {
    data: transacoesCreateManyUsuarioInput | transacoesCreateManyUsuarioInput[]
  }

  export type orcamentosCreateWithoutUsuarioInput = {
    valor_limite: number
    periodo: string
    criado_em?: Date | string
    categoria: categoriasCreateNestedOneWithoutOrcamentosInput
  }

  export type orcamentosUncheckedCreateWithoutUsuarioInput = {
    id?: number
    categoria_id: number
    valor_limite: number
    periodo: string
    criado_em?: Date | string
  }

  export type orcamentosCreateOrConnectWithoutUsuarioInput = {
    where: orcamentosWhereUniqueInput
    create: XOR<orcamentosCreateWithoutUsuarioInput, orcamentosUncheckedCreateWithoutUsuarioInput>
  }

  export type orcamentosCreateManyUsuarioInputEnvelope = {
    data: orcamentosCreateManyUsuarioInput | orcamentosCreateManyUsuarioInput[]
  }

  export type metasCreateWithoutUsuarioInput = {
    nome: string
    valor_meta: number
    data_limite: Date | string
    valor_atual?: number
    criado_em?: Date | string
  }

  export type metasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    valor_meta: number
    data_limite: Date | string
    valor_atual?: number
    criado_em?: Date | string
  }

  export type metasCreateOrConnectWithoutUsuarioInput = {
    where: metasWhereUniqueInput
    create: XOR<metasCreateWithoutUsuarioInput, metasUncheckedCreateWithoutUsuarioInput>
  }

  export type metasCreateManyUsuarioInputEnvelope = {
    data: metasCreateManyUsuarioInput | metasCreateManyUsuarioInput[]
  }

  export type categoriasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: categoriasWhereUniqueInput
    update: XOR<categoriasUpdateWithoutUsuarioInput, categoriasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<categoriasCreateWithoutUsuarioInput, categoriasUncheckedCreateWithoutUsuarioInput>
  }

  export type categoriasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: categoriasWhereUniqueInput
    data: XOR<categoriasUpdateWithoutUsuarioInput, categoriasUncheckedUpdateWithoutUsuarioInput>
  }

  export type categoriasUpdateManyWithWhereWithoutUsuarioInput = {
    where: categoriasScalarWhereInput
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type categoriasScalarWhereInput = {
    AND?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
    OR?: categoriasScalarWhereInput[]
    NOT?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
    id?: IntFilter<"categorias"> | number
    nome?: StringFilter<"categorias"> | string
    tipo?: StringFilter<"categorias"> | string
    criado_em?: DateTimeFilter<"categorias"> | Date | string
    usuario_id?: IntFilter<"categorias"> | number
  }

  export type contasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: contasWhereUniqueInput
    update: XOR<contasUpdateWithoutUsuarioInput, contasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<contasCreateWithoutUsuarioInput, contasUncheckedCreateWithoutUsuarioInput>
  }

  export type contasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: contasWhereUniqueInput
    data: XOR<contasUpdateWithoutUsuarioInput, contasUncheckedUpdateWithoutUsuarioInput>
  }

  export type contasUpdateManyWithWhereWithoutUsuarioInput = {
    where: contasScalarWhereInput
    data: XOR<contasUpdateManyMutationInput, contasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type contasScalarWhereInput = {
    AND?: contasScalarWhereInput | contasScalarWhereInput[]
    OR?: contasScalarWhereInput[]
    NOT?: contasScalarWhereInput | contasScalarWhereInput[]
    id?: IntFilter<"contas"> | number
    nome?: StringFilter<"contas"> | string
    saldo_inicial?: FloatFilter<"contas"> | number
    criado_em?: DateTimeFilter<"contas"> | Date | string
    usuario_id?: IntFilter<"contas"> | number
  }

  export type transacoesUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: transacoesWhereUniqueInput
    update: XOR<transacoesUpdateWithoutUsuarioInput, transacoesUncheckedUpdateWithoutUsuarioInput>
    create: XOR<transacoesCreateWithoutUsuarioInput, transacoesUncheckedCreateWithoutUsuarioInput>
  }

  export type transacoesUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: transacoesWhereUniqueInput
    data: XOR<transacoesUpdateWithoutUsuarioInput, transacoesUncheckedUpdateWithoutUsuarioInput>
  }

  export type transacoesUpdateManyWithWhereWithoutUsuarioInput = {
    where: transacoesScalarWhereInput
    data: XOR<transacoesUpdateManyMutationInput, transacoesUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type transacoesScalarWhereInput = {
    AND?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
    OR?: transacoesScalarWhereInput[]
    NOT?: transacoesScalarWhereInput | transacoesScalarWhereInput[]
    id?: IntFilter<"transacoes"> | number
    usuario_id?: IntFilter<"transacoes"> | number
    categoria_id?: IntFilter<"transacoes"> | number
    conta_id?: IntFilter<"transacoes"> | number
    valor?: FloatFilter<"transacoes"> | number
    tipo?: StringFilter<"transacoes"> | string
    descricao?: StringNullableFilter<"transacoes"> | string | null
    data_transacao?: DateTimeFilter<"transacoes"> | Date | string
    criado_em?: DateTimeFilter<"transacoes"> | Date | string
  }

  export type orcamentosUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: orcamentosWhereUniqueInput
    update: XOR<orcamentosUpdateWithoutUsuarioInput, orcamentosUncheckedUpdateWithoutUsuarioInput>
    create: XOR<orcamentosCreateWithoutUsuarioInput, orcamentosUncheckedCreateWithoutUsuarioInput>
  }

  export type orcamentosUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: orcamentosWhereUniqueInput
    data: XOR<orcamentosUpdateWithoutUsuarioInput, orcamentosUncheckedUpdateWithoutUsuarioInput>
  }

  export type orcamentosUpdateManyWithWhereWithoutUsuarioInput = {
    where: orcamentosScalarWhereInput
    data: XOR<orcamentosUpdateManyMutationInput, orcamentosUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type orcamentosScalarWhereInput = {
    AND?: orcamentosScalarWhereInput | orcamentosScalarWhereInput[]
    OR?: orcamentosScalarWhereInput[]
    NOT?: orcamentosScalarWhereInput | orcamentosScalarWhereInput[]
    id?: IntFilter<"orcamentos"> | number
    usuario_id?: IntFilter<"orcamentos"> | number
    categoria_id?: IntFilter<"orcamentos"> | number
    valor_limite?: FloatFilter<"orcamentos"> | number
    periodo?: StringFilter<"orcamentos"> | string
    criado_em?: DateTimeFilter<"orcamentos"> | Date | string
  }

  export type metasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: metasWhereUniqueInput
    update: XOR<metasUpdateWithoutUsuarioInput, metasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<metasCreateWithoutUsuarioInput, metasUncheckedCreateWithoutUsuarioInput>
  }

  export type metasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: metasWhereUniqueInput
    data: XOR<metasUpdateWithoutUsuarioInput, metasUncheckedUpdateWithoutUsuarioInput>
  }

  export type metasUpdateManyWithWhereWithoutUsuarioInput = {
    where: metasScalarWhereInput
    data: XOR<metasUpdateManyMutationInput, metasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type metasScalarWhereInput = {
    AND?: metasScalarWhereInput | metasScalarWhereInput[]
    OR?: metasScalarWhereInput[]
    NOT?: metasScalarWhereInput | metasScalarWhereInput[]
    id?: IntFilter<"metas"> | number
    usuario_id?: IntFilter<"metas"> | number
    nome?: StringFilter<"metas"> | string
    valor_meta?: FloatFilter<"metas"> | number
    data_limite?: DateTimeFilter<"metas"> | Date | string
    valor_atual?: FloatFilter<"metas"> | number
    criado_em?: DateTimeFilter<"metas"> | Date | string
  }

  export type usuariosCreateWithoutCategoriasInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    contas?: contasCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosCreateNestedManyWithoutUsuarioInput
    metas?: metasCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateWithoutCategoriasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    contas?: contasUncheckedCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutUsuarioInput
    metas?: metasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosCreateOrConnectWithoutCategoriasInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutCategoriasInput, usuariosUncheckedCreateWithoutCategoriasInput>
  }

  export type transacoesCreateWithoutCategoriaInput = {
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutTransacoesInput
    conta: contasCreateNestedOneWithoutTransacoesInput
    parcelas?: parcelasCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesUncheckedCreateWithoutCategoriaInput = {
    id?: number
    usuario_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    parcelas?: parcelasUncheckedCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesCreateOrConnectWithoutCategoriaInput = {
    where: transacoesWhereUniqueInput
    create: XOR<transacoesCreateWithoutCategoriaInput, transacoesUncheckedCreateWithoutCategoriaInput>
  }

  export type transacoesCreateManyCategoriaInputEnvelope = {
    data: transacoesCreateManyCategoriaInput | transacoesCreateManyCategoriaInput[]
  }

  export type orcamentosCreateWithoutCategoriaInput = {
    valor_limite: number
    periodo: string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutOrcamentosInput
  }

  export type orcamentosUncheckedCreateWithoutCategoriaInput = {
    id?: number
    usuario_id: number
    valor_limite: number
    periodo: string
    criado_em?: Date | string
  }

  export type orcamentosCreateOrConnectWithoutCategoriaInput = {
    where: orcamentosWhereUniqueInput
    create: XOR<orcamentosCreateWithoutCategoriaInput, orcamentosUncheckedCreateWithoutCategoriaInput>
  }

  export type orcamentosCreateManyCategoriaInputEnvelope = {
    data: orcamentosCreateManyCategoriaInput | orcamentosCreateManyCategoriaInput[]
  }

  export type usuariosUpsertWithoutCategoriasInput = {
    update: XOR<usuariosUpdateWithoutCategoriasInput, usuariosUncheckedUpdateWithoutCategoriasInput>
    create: XOR<usuariosCreateWithoutCategoriasInput, usuariosUncheckedCreateWithoutCategoriasInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutCategoriasInput, usuariosUncheckedUpdateWithoutCategoriasInput>
  }

  export type usuariosUpdateWithoutCategoriasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    contas?: contasUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUpdateManyWithoutUsuarioNestedInput
    metas?: metasUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    contas?: contasUncheckedUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutUsuarioNestedInput
    metas?: metasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type transacoesUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: transacoesWhereUniqueInput
    update: XOR<transacoesUpdateWithoutCategoriaInput, transacoesUncheckedUpdateWithoutCategoriaInput>
    create: XOR<transacoesCreateWithoutCategoriaInput, transacoesUncheckedCreateWithoutCategoriaInput>
  }

  export type transacoesUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: transacoesWhereUniqueInput
    data: XOR<transacoesUpdateWithoutCategoriaInput, transacoesUncheckedUpdateWithoutCategoriaInput>
  }

  export type transacoesUpdateManyWithWhereWithoutCategoriaInput = {
    where: transacoesScalarWhereInput
    data: XOR<transacoesUpdateManyMutationInput, transacoesUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type orcamentosUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: orcamentosWhereUniqueInput
    update: XOR<orcamentosUpdateWithoutCategoriaInput, orcamentosUncheckedUpdateWithoutCategoriaInput>
    create: XOR<orcamentosCreateWithoutCategoriaInput, orcamentosUncheckedCreateWithoutCategoriaInput>
  }

  export type orcamentosUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: orcamentosWhereUniqueInput
    data: XOR<orcamentosUpdateWithoutCategoriaInput, orcamentosUncheckedUpdateWithoutCategoriaInput>
  }

  export type orcamentosUpdateManyWithWhereWithoutCategoriaInput = {
    where: orcamentosScalarWhereInput
    data: XOR<orcamentosUpdateManyMutationInput, orcamentosUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type usuariosCreateWithoutContasInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosCreateNestedManyWithoutUsuarioInput
    metas?: metasCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateWithoutContasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasUncheckedCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutUsuarioInput
    metas?: metasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosCreateOrConnectWithoutContasInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutContasInput, usuariosUncheckedCreateWithoutContasInput>
  }

  export type transacoesCreateWithoutContaInput = {
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutTransacoesInput
    categoria: categoriasCreateNestedOneWithoutTransacoesInput
    parcelas?: parcelasCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesUncheckedCreateWithoutContaInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    parcelas?: parcelasUncheckedCreateNestedManyWithoutTransacaoInput
  }

  export type transacoesCreateOrConnectWithoutContaInput = {
    where: transacoesWhereUniqueInput
    create: XOR<transacoesCreateWithoutContaInput, transacoesUncheckedCreateWithoutContaInput>
  }

  export type transacoesCreateManyContaInputEnvelope = {
    data: transacoesCreateManyContaInput | transacoesCreateManyContaInput[]
  }

  export type usuariosUpsertWithoutContasInput = {
    update: XOR<usuariosUpdateWithoutContasInput, usuariosUncheckedUpdateWithoutContasInput>
    create: XOR<usuariosCreateWithoutContasInput, usuariosUncheckedCreateWithoutContasInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutContasInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutContasInput, usuariosUncheckedUpdateWithoutContasInput>
  }

  export type usuariosUpdateWithoutContasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUpdateManyWithoutUsuarioNestedInput
    metas?: metasUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateWithoutContasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUncheckedUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutUsuarioNestedInput
    metas?: metasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type transacoesUpsertWithWhereUniqueWithoutContaInput = {
    where: transacoesWhereUniqueInput
    update: XOR<transacoesUpdateWithoutContaInput, transacoesUncheckedUpdateWithoutContaInput>
    create: XOR<transacoesCreateWithoutContaInput, transacoesUncheckedCreateWithoutContaInput>
  }

  export type transacoesUpdateWithWhereUniqueWithoutContaInput = {
    where: transacoesWhereUniqueInput
    data: XOR<transacoesUpdateWithoutContaInput, transacoesUncheckedUpdateWithoutContaInput>
  }

  export type transacoesUpdateManyWithWhereWithoutContaInput = {
    where: transacoesScalarWhereInput
    data: XOR<transacoesUpdateManyMutationInput, transacoesUncheckedUpdateManyWithoutContaInput>
  }

  export type usuariosCreateWithoutTransacoesInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasCreateNestedManyWithoutUsuarioInput
    contas?: contasCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosCreateNestedManyWithoutUsuarioInput
    metas?: metasCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateWithoutTransacoesInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasUncheckedCreateNestedManyWithoutUsuarioInput
    contas?: contasUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutUsuarioInput
    metas?: metasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosCreateOrConnectWithoutTransacoesInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutTransacoesInput, usuariosUncheckedCreateWithoutTransacoesInput>
  }

  export type categoriasCreateWithoutTransacoesInput = {
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutCategoriasInput
    orcamentos?: orcamentosCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasUncheckedCreateWithoutTransacoesInput = {
    id?: number
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario_id: number
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasCreateOrConnectWithoutTransacoesInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutTransacoesInput, categoriasUncheckedCreateWithoutTransacoesInput>
  }

  export type contasCreateWithoutTransacoesInput = {
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutContasInput
  }

  export type contasUncheckedCreateWithoutTransacoesInput = {
    id?: number
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
    usuario_id: number
  }

  export type contasCreateOrConnectWithoutTransacoesInput = {
    where: contasWhereUniqueInput
    create: XOR<contasCreateWithoutTransacoesInput, contasUncheckedCreateWithoutTransacoesInput>
  }

  export type parcelasCreateWithoutTransacaoInput = {
    numero_parcela: number
    valor: number
    data_vencimento: Date | string
  }

  export type parcelasUncheckedCreateWithoutTransacaoInput = {
    id?: number
    numero_parcela: number
    valor: number
    data_vencimento: Date | string
  }

  export type parcelasCreateOrConnectWithoutTransacaoInput = {
    where: parcelasWhereUniqueInput
    create: XOR<parcelasCreateWithoutTransacaoInput, parcelasUncheckedCreateWithoutTransacaoInput>
  }

  export type parcelasCreateManyTransacaoInputEnvelope = {
    data: parcelasCreateManyTransacaoInput | parcelasCreateManyTransacaoInput[]
  }

  export type usuariosUpsertWithoutTransacoesInput = {
    update: XOR<usuariosUpdateWithoutTransacoesInput, usuariosUncheckedUpdateWithoutTransacoesInput>
    create: XOR<usuariosCreateWithoutTransacoesInput, usuariosUncheckedCreateWithoutTransacoesInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutTransacoesInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutTransacoesInput, usuariosUncheckedUpdateWithoutTransacoesInput>
  }

  export type usuariosUpdateWithoutTransacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateManyWithoutUsuarioNestedInput
    contas?: contasUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUpdateManyWithoutUsuarioNestedInput
    metas?: metasUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateWithoutTransacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUncheckedUpdateManyWithoutUsuarioNestedInput
    contas?: contasUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutUsuarioNestedInput
    metas?: metasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type categoriasUpsertWithoutTransacoesInput = {
    update: XOR<categoriasUpdateWithoutTransacoesInput, categoriasUncheckedUpdateWithoutTransacoesInput>
    create: XOR<categoriasCreateWithoutTransacoesInput, categoriasUncheckedCreateWithoutTransacoesInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutTransacoesInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutTransacoesInput, categoriasUncheckedUpdateWithoutTransacoesInput>
  }

  export type categoriasUpdateWithoutTransacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutCategoriasNestedInput
    orcamentos?: orcamentosUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriasUncheckedUpdateWithoutTransacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    orcamentos?: orcamentosUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type contasUpsertWithoutTransacoesInput = {
    update: XOR<contasUpdateWithoutTransacoesInput, contasUncheckedUpdateWithoutTransacoesInput>
    create: XOR<contasCreateWithoutTransacoesInput, contasUncheckedCreateWithoutTransacoesInput>
    where?: contasWhereInput
  }

  export type contasUpdateToOneWithWhereWithoutTransacoesInput = {
    where?: contasWhereInput
    data: XOR<contasUpdateWithoutTransacoesInput, contasUncheckedUpdateWithoutTransacoesInput>
  }

  export type contasUpdateWithoutTransacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutContasNestedInput
  }

  export type contasUncheckedUpdateWithoutTransacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
  }

  export type parcelasUpsertWithWhereUniqueWithoutTransacaoInput = {
    where: parcelasWhereUniqueInput
    update: XOR<parcelasUpdateWithoutTransacaoInput, parcelasUncheckedUpdateWithoutTransacaoInput>
    create: XOR<parcelasCreateWithoutTransacaoInput, parcelasUncheckedCreateWithoutTransacaoInput>
  }

  export type parcelasUpdateWithWhereUniqueWithoutTransacaoInput = {
    where: parcelasWhereUniqueInput
    data: XOR<parcelasUpdateWithoutTransacaoInput, parcelasUncheckedUpdateWithoutTransacaoInput>
  }

  export type parcelasUpdateManyWithWhereWithoutTransacaoInput = {
    where: parcelasScalarWhereInput
    data: XOR<parcelasUpdateManyMutationInput, parcelasUncheckedUpdateManyWithoutTransacaoInput>
  }

  export type parcelasScalarWhereInput = {
    AND?: parcelasScalarWhereInput | parcelasScalarWhereInput[]
    OR?: parcelasScalarWhereInput[]
    NOT?: parcelasScalarWhereInput | parcelasScalarWhereInput[]
    id?: IntFilter<"parcelas"> | number
    transacao_id?: IntFilter<"parcelas"> | number
    numero_parcela?: IntFilter<"parcelas"> | number
    valor?: FloatFilter<"parcelas"> | number
    data_vencimento?: DateTimeFilter<"parcelas"> | Date | string
  }

  export type transacoesCreateWithoutParcelasInput = {
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutTransacoesInput
    categoria: categoriasCreateNestedOneWithoutTransacoesInput
    conta: contasCreateNestedOneWithoutTransacoesInput
  }

  export type transacoesUncheckedCreateWithoutParcelasInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
  }

  export type transacoesCreateOrConnectWithoutParcelasInput = {
    where: transacoesWhereUniqueInput
    create: XOR<transacoesCreateWithoutParcelasInput, transacoesUncheckedCreateWithoutParcelasInput>
  }

  export type transacoesUpsertWithoutParcelasInput = {
    update: XOR<transacoesUpdateWithoutParcelasInput, transacoesUncheckedUpdateWithoutParcelasInput>
    create: XOR<transacoesCreateWithoutParcelasInput, transacoesUncheckedCreateWithoutParcelasInput>
    where?: transacoesWhereInput
  }

  export type transacoesUpdateToOneWithWhereWithoutParcelasInput = {
    where?: transacoesWhereInput
    data: XOR<transacoesUpdateWithoutParcelasInput, transacoesUncheckedUpdateWithoutParcelasInput>
  }

  export type transacoesUpdateWithoutParcelasInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutTransacoesNestedInput
    categoria?: categoriasUpdateOneRequiredWithoutTransacoesNestedInput
    conta?: contasUpdateOneRequiredWithoutTransacoesNestedInput
  }

  export type transacoesUncheckedUpdateWithoutParcelasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usuariosCreateWithoutOrcamentosInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasCreateNestedManyWithoutUsuarioInput
    contas?: contasCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesCreateNestedManyWithoutUsuarioInput
    metas?: metasCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateWithoutOrcamentosInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasUncheckedCreateNestedManyWithoutUsuarioInput
    contas?: contasUncheckedCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesUncheckedCreateNestedManyWithoutUsuarioInput
    metas?: metasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosCreateOrConnectWithoutOrcamentosInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutOrcamentosInput, usuariosUncheckedCreateWithoutOrcamentosInput>
  }

  export type categoriasCreateWithoutOrcamentosInput = {
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario: usuariosCreateNestedOneWithoutCategoriasInput
    transacoes?: transacoesCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasUncheckedCreateWithoutOrcamentosInput = {
    id?: number
    nome: string
    tipo: string
    criado_em?: Date | string
    usuario_id: number
    transacoes?: transacoesUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type categoriasCreateOrConnectWithoutOrcamentosInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutOrcamentosInput, categoriasUncheckedCreateWithoutOrcamentosInput>
  }

  export type usuariosUpsertWithoutOrcamentosInput = {
    update: XOR<usuariosUpdateWithoutOrcamentosInput, usuariosUncheckedUpdateWithoutOrcamentosInput>
    create: XOR<usuariosCreateWithoutOrcamentosInput, usuariosUncheckedCreateWithoutOrcamentosInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutOrcamentosInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutOrcamentosInput, usuariosUncheckedUpdateWithoutOrcamentosInput>
  }

  export type usuariosUpdateWithoutOrcamentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateManyWithoutUsuarioNestedInput
    contas?: contasUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUpdateManyWithoutUsuarioNestedInput
    metas?: metasUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateWithoutOrcamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUncheckedUpdateManyWithoutUsuarioNestedInput
    contas?: contasUncheckedUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUncheckedUpdateManyWithoutUsuarioNestedInput
    metas?: metasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type categoriasUpsertWithoutOrcamentosInput = {
    update: XOR<categoriasUpdateWithoutOrcamentosInput, categoriasUncheckedUpdateWithoutOrcamentosInput>
    create: XOR<categoriasCreateWithoutOrcamentosInput, categoriasUncheckedCreateWithoutOrcamentosInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutOrcamentosInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutOrcamentosInput, categoriasUncheckedUpdateWithoutOrcamentosInput>
  }

  export type categoriasUpdateWithoutOrcamentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutCategoriasNestedInput
    transacoes?: transacoesUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriasUncheckedUpdateWithoutOrcamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    transacoes?: transacoesUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type usuariosCreateWithoutMetasInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasCreateNestedManyWithoutUsuarioInput
    contas?: contasCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateWithoutMetasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    ativo?: boolean
    categorias?: categoriasUncheckedCreateNestedManyWithoutUsuarioInput
    contas?: contasUncheckedCreateNestedManyWithoutUsuarioInput
    transacoes?: transacoesUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: orcamentosUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosCreateOrConnectWithoutMetasInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutMetasInput, usuariosUncheckedCreateWithoutMetasInput>
  }

  export type usuariosUpsertWithoutMetasInput = {
    update: XOR<usuariosUpdateWithoutMetasInput, usuariosUncheckedUpdateWithoutMetasInput>
    create: XOR<usuariosCreateWithoutMetasInput, usuariosUncheckedCreateWithoutMetasInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutMetasInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutMetasInput, usuariosUncheckedUpdateWithoutMetasInput>
  }

  export type usuariosUpdateWithoutMetasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateManyWithoutUsuarioNestedInput
    contas?: contasUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateWithoutMetasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ativo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUncheckedUpdateManyWithoutUsuarioNestedInput
    contas?: contasUncheckedUpdateManyWithoutUsuarioNestedInput
    transacoes?: transacoesUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type categoriasCreateManyUsuarioInput = {
    id?: number
    nome: string
    tipo: string
    criado_em?: Date | string
  }

  export type contasCreateManyUsuarioInput = {
    id?: number
    nome: string
    saldo_inicial?: number
    criado_em?: Date | string
  }

  export type transacoesCreateManyUsuarioInput = {
    id?: number
    categoria_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
  }

  export type orcamentosCreateManyUsuarioInput = {
    id?: number
    categoria_id: number
    valor_limite: number
    periodo: string
    criado_em?: Date | string
  }

  export type metasCreateManyUsuarioInput = {
    id?: number
    nome: string
    valor_meta: number
    data_limite: Date | string
    valor_atual?: number
    criado_em?: Date | string
  }

  export type categoriasUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    transacoes?: transacoesUpdateManyWithoutCategoriaNestedInput
    orcamentos?: orcamentosUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    transacoes?: transacoesUncheckedUpdateManyWithoutCategoriaNestedInput
    orcamentos?: orcamentosUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contasUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    transacoes?: transacoesUpdateManyWithoutContaNestedInput
  }

  export type contasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    transacoes?: transacoesUncheckedUpdateManyWithoutContaNestedInput
  }

  export type contasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    saldo_inicial?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transacoesUpdateWithoutUsuarioInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: categoriasUpdateOneRequiredWithoutTransacoesNestedInput
    conta?: contasUpdateOneRequiredWithoutTransacoesNestedInput
    parcelas?: parcelasUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: parcelasUncheckedUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosUpdateWithoutUsuarioInput = {
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: categoriasUpdateOneRequiredWithoutOrcamentosNestedInput
  }

  export type orcamentosUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type metasUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type metasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type metasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor_meta?: FloatFieldUpdateOperationsInput | number
    data_limite?: DateTimeFieldUpdateOperationsInput | Date | string
    valor_atual?: FloatFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transacoesCreateManyCategoriaInput = {
    id?: number
    usuario_id: number
    conta_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
  }

  export type orcamentosCreateManyCategoriaInput = {
    id?: number
    usuario_id: number
    valor_limite: number
    periodo: string
    criado_em?: Date | string
  }

  export type transacoesUpdateWithoutCategoriaInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutTransacoesNestedInput
    conta?: contasUpdateOneRequiredWithoutTransacoesNestedInput
    parcelas?: parcelasUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: parcelasUncheckedUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    conta_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosUpdateWithoutCategoriaInput = {
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutOrcamentosNestedInput
  }

  export type orcamentosUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orcamentosUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    valor_limite?: FloatFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transacoesCreateManyContaInput = {
    id?: number
    usuario_id: number
    categoria_id: number
    valor: number
    tipo: string
    descricao?: string | null
    data_transacao: Date | string
    criado_em?: Date | string
  }

  export type transacoesUpdateWithoutContaInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: usuariosUpdateOneRequiredWithoutTransacoesNestedInput
    categoria?: categoriasUpdateOneRequiredWithoutTransacoesNestedInput
    parcelas?: parcelasUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateWithoutContaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: parcelasUncheckedUpdateManyWithoutTransacaoNestedInput
  }

  export type transacoesUncheckedUpdateManyWithoutContaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_transacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type parcelasCreateManyTransacaoInput = {
    id?: number
    numero_parcela: number
    valor: number
    data_vencimento: Date | string
  }

  export type parcelasUpdateWithoutTransacaoInput = {
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type parcelasUncheckedUpdateWithoutTransacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type parcelasUncheckedUpdateManyWithoutTransacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero_parcela?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    data_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}